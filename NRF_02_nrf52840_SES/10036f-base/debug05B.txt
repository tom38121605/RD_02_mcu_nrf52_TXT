//usb_serial_send_ack(OMMO_ACK_SUCCESS);          //03 ff 01 01 01 00
//usb_serial_send_ack(OMMO_ACK_INVALID_MODE);     //05 ff 01 01 ff 00
//usb_serial_send_ack(OMMO_ACK_INVALID_DATA);     //05 ff 01 02 fe 00
//usb_serial_send_ack(OMMO_ACK_UNKNOWN_COMMAND);  //05 ff 01 03 fd 00 

------------------------------------




typedef enum _OmmoCommand 
    OMMO_COMMAND_NONE = 0, 
    OMMO_COMMAND_ACK = 1, 
    OMMO_COMMAND_PING = 2, 
    OMMO_COMMAND_DATA_DISABLE = 3, 
    OMMO_COMMAND_GET_UUID = 4, 
    OMMO_COMMAND_FW_VERSION = 5, 
    .....

    OMMO_COMMAND_BLOCK_DEV_READ = 18, 
    OMMO_COMMAND_BLOCK_DEV_WRITE = 19, 
    OMMO_COMMAND_BLOCK_DEV_REQ_GEOMETRY = 20, 
    OMMO_COMMAND_BLOCK_DEV_SYNCH = 21, 

    OMMO_COMMAND_USB_DATA_ENABLE = 32, 



typedef enum _OmmoAck 
{ 
    OMMO_ACK_SUCCESS = 0, 
    OMMO_ACK_INVALID_MODE = 1, 
    OMMO_ACK_INVALID_DATA = 2, 
    OMMO_ACK_UNKNOWN_COMMAND = 3, 
    OMMO_ACK_NOT_FOUND = 4, 
    OMMO_ACK_BUSY = 5, 
    OMMO_ACK_INTERNAL_ERROR = 6, 
    OMMO_ACK_INVALID_SENSOR = 7, 
    OMMO_ACK_NO_MEM = 8, 
    OMMO_ACK_TIMEOUT = 9 
} OmmoAck;


----------------------------------------------------

#define USB_SERIAL_TX_BUFFER_SIZE 8192
#define USB_SERIAL_RX_BUFFER_SIZE (3*1024)

uint8_t usb_serial_rx_packet_buffer[USB_SERIAL_RX_BUFFER_SIZE];
uint16_t usb_serial_rx_packet_length;


uint16_t usb_serial_tx_buffer_top;
uint8_t usb_serial_tx_buffer_primary[USB_SERIAL_TX_BUFFER_SIZE];
uint8_t usb_serial_tx_buffer_secondary[USB_SERIAL_TX_BUFFER_SIZE];
uint8_t *usb_serial_tx_buffer_active;

-------


static USB_CDC_INST _aInst[USB_CDC_DEVICES];   //USB_CDC_DEVICES=2

typedef struct {
  USB_CDC_ON_SET_LINE_CODING        * pfOnSetLineCoding;
  USB_CDC_ON_SET_CONTROL_LINE_STATE * pfOnSetControlLineState;
  USB_CDC_ON_SET_BREAK              * pfOnBreak;
  USB_CDC_LINE_CODING                 LineCoding;
  U16                                 ControlInterfaceNum;
  U16                                 DataInterfaceNum;
  U8                                  EPIn;
  U8                                  EPOut;
  U8                                  EPInt;
  U8                                  aLineCodingBuffer[7];
  U8                                  aStatus[10];
} USB_CDC_INST;


-------------------



define USB_DIR_IN  1
define USB_DIR_OUT 0


typedef struct 
{
  U8 DTR;       // Data Terminal Ready.
  U8 RTS;       // Request To Send.
} USB_CDC_CONTROL_LINE_STATE;




