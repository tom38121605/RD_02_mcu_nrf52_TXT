

待察1ok：  rx_buffer 和 rx_buf 的区别
             rx_buffer  -- 固定连接接收DMA，( RXD.PTR 和 RXD.MAXCNT )
             rx_buf   -- 用户的数据，用于存储rx_buffer接收到的数据

待察2：  mcb的作用 （或用于切换第一包数据和第二包数据）
答：   主要是在发送和接收时用，
         。 一是连接 rx_buffer 和 tx_buffer 给DMA用 （包括DMA的长度）
         。二是连接m_rx_fifo，接收用户的数据


待察3ok： mcb 和m_tx_fifo，m_rx_fifo的关系
答： 数据关系如下：      
       tx： 用户数据byte -- tx_buf  --> m_tx_fifo  -->  tx_buffer --  mcb  -->  DMA 
                  p_fifo->p_buf[*->write_pos] = byte;  
                  tx_buffer = p_fifo->p_buf[ *->read_pos ];

                 p_cb->tx_buffer_length = 1;                 
                 p_cb->p_tx_buffer      = tx_buffer;     

                 p_reg->TXD.PTR    =   p_cb->p_tx_buffer ;            // tx_buffer
                 p_reg->TXD.MAXCNT = p_cb->tx_buffer_length ;

       rx： 用户数据  RXD  -- mcb  -- rx_buffer  -- m_rx_fifo --  rx_buf  -- rx_byte    
              p_reg->RXD.PTR    = rx_buffer;
              p_reg->RXD.MAXCNT =1;

             p_cb->rx_buffer_length = length;             //1
             p_cb->p_rx_buffer      = p_data;              //rx_buffer 
             p_cb->rx_secondary_buffer_length = 0;

            p_fifo->p_buf[p_fifo->write_pos = p_cb->p_rx_buffer  //rx_buffer 
            p_fifo->write_pos++;

            rx_byte = m_rx_fifo->p_buf[read_pos]
           p_fifo->read_pos++;

待察4ok：  m_contexts[0]的作用
       答： 具体用在uarte_evt_handler中，用于union错误处理的分支  （contexts 主要是指明回调函数是属于哪个类，如果等于0，则该回调函数是独立函数，不属于任何类）

待察5ok： fifo数据是如何回滚的，就是满了之后，如何回到开始位置的 （在哪个函数里面实现）
答： 是通过跟mask的&操作实现的，具体在fifo_put函数中

待察6？： mcb的p_rx_secondary_buffer  是如何跟   p_rx_buffer 交替的   （实际上，会用到这个功能）
待察6？：待理解m_rx_ovf （或处理双buf）
待察6？：待理解second_buffer  （或处理双buf）



。ok，FIFO_LENGTH() : 是指当前大巴p_fifo里面的人数
。ok，rx接收数据时，从mcb转入数据到fifo，是在irq里面自动实现的，具体看NRF_DRV_UART_EVT_RX_DONE  （tx时，fifo到mcb是手动的）


===========================uart init===================================



（公园）RXD -- 西安旅行社（mcb） --  绿色大巴rx（rx_buffer）  --  上海旅行社（m_rx_fifo）  --  黄色大巴rx（rx_buf） -- byte（游客家里）
（游客家里）byte --上海旅行社（m_tx_fifo） --  黄色大巴tx（tx_buf） --  西安旅行社（mcb） --  绿色大巴tx（tx_buffer） -- TXD（公园） 


flow：

     main -- uart_init -- APP_UART_FIFO_INIT -- app_uart_init -- (m_event_handler = uart_error_handle)
     --  nrf_drv_uart_init -- (m_handlers[0] = uart_event_handler) -- nrfx_uarte_init -- (p_cb->handler = uart_event_handler) 
    -- ( m_prs_box_4.handler = nrfx_uarte_0_irq_handler )

     main -- uart_init -- APP_UART_FIFO_INIT -- app_uart_init -- nrf_drv_uart_init -- nrfx_uarte_init -- nrfx_prs_acquire -- apply_config -- nrf_drv_uart_rx -- nrfx_uarte_rx

数据流：uart_error_handle  --> m_event_handler                                     //全局变量 m_event_handler
数据流：  (rx_buf + tx_buf)  --> buffers  -->  (m_rx_fifo  + m_tx_fifo )        //黄色大巴rx 和黄色大巴tx，挂靠上海旅行社（目地）
数据流： params  -->  config

数据流：uart_event_handler  -->  m_handlers[0]                                     //全局变量  m_handlers
数据流： 0   -->  m_contexts[0]                                                            //全局变量  m_contexts

数据流51： uarte_evt_handler  + 常量 -->  m_cb[0]  ,  0 -->  m_cb[0].p_context        //uarte_evt_handler挂靠西安旅行社（出发）
数据流52： config  -- 寄存器
数据流：  nrfx_uarte_0_irq_handler  -->   irq_handlers[0]                      //临时变量
数据流： nrfx_uarte_0_irq_handler  --> m_prs_box_4.handler ,   true -- m_prs_box_4.acquired 

数据流61： rx_buffer -->  m_cb[0]                                                                                         //绿色大巴rx 挂靠西安旅行社
数据流62： rx_buffer  -->  RXD.PTR， 1  -->  RXD.MAXCNT                                                    //绿色大巴rx 对接dma rx

评论： buffers 就是多此一举

----------------------------------------------------

int main( ) 
    
    uart_init(); 

-------------------------------------------------------

数据流； 常量 --  params
void uart_init(void)
 
    uint32_t err_code;
    const app_uart_comm_params_t comm_params =
      {
          RX_PIN_NUMBER,      //P1.10
          TX_PIN_NUMBER,      //P1.15
          RTS_PIN_NUMBER,    //P0.5
          CTS_PIN_NUMBER,    //0.7
          APP_UART_FLOW_CONTROL_DISABLED,
          false,
          DTM_BITRATE       //19200
      };

    APP_UART_FIFO_INIT(&comm_params,
                       UART_RX_BUF_SIZE,                   // 256
                       UART_TX_BUF_SIZE,                   // 256
                       uart_error_handle,
                       APP_IRQ_PRIORITY_LOWEST,      // 7
                       err_code);

-----------------

评论： buffers 是多此一举
数据流：  rx_buf + tx_buf  --> buffers
参数：   params, 256， 256， uart_error_handle,  7，  err_code
#define APP_UART_FIFO_INIT(P_COMM_PARAMS,   RX_BUF_SIZE,   TX_BUF_SIZE,   EVT_HANDLER, IRQ_PRIO,   ERR_CODE)  
    do                                                                                             
    {                                                                                              
        app_uart_buffers_t buffers;       //全局变量    （或是uart_init中的局部static变量 ）                                                                  
        static uint8_t     rx_buf[256];      //全局变量   （或是uart_init中的局部static变量 ）        //黄色大巴rx                                             
        static uint8_t     tx_buf[256];      //全局变量    （或是uart_init中的局部static变量 ）        //黄色大巴tx                                                         
                                                                                                    
        buffers.rx_buf      = rx_buf;                                                               
        buffers.rx_buf_size = sizeof (rx_buf);                                                      
        buffers.tx_buf      = tx_buf;                                                              
        buffers.tx_buf_size = sizeof (tx_buf);                                                     
        ERR_CODE = app_uart_init(P_COMM_PARAMS, &buffers, EVT_HANDLER, 7);                  
    } while (0)
 
-----------------

数据流：uart_error_handle  --> m_event_handler  
数据流：  rx_buf + tx_buf  -->  buffers  -->  m_rx_fifo  + m_tx_fifo   （把绿色大巴挂靠在上海旅行社）
数据流：params  -->  config
数据流：m_rx_ovf = false
参数：   params,  buffers， uart_error_handle,  7  
app_uart_init(  * p_comm_params,  *p_buffers,  event_handler,    irq_priority)
 
    m_event_handler = event_handler;   //uart_error_handle     //这个回调函数只处理错误，名称取得有点坑 （建议改为 m_err_event_handler ）
 
    //app_fifo_init(&m_rx_fifo, p_buffers->rx_buf, p_buffers->rx_buf_size); 
        m_rx_fifo->p_buf         =  p_buffers->rx_buf;                                   //黄色大巴rx  --> 上海旅行社rx
        m_rx_fifo->buf_size_mask = p_buffers->rx_buf_size - 1;
        m_rx_fifo->read_pos      = 0;
        m_rx_fifo->write_pos     = 0;

    //app_fifo_init(&m_tx_fifo, p_buffers->tx_buf, p_buffers->tx_buf_size);
        m_tx_fifo->p_buf         =  p_buffers->tx_buf;
        m_tx_fifo->buf_size_mask = p_buffers->tx_buf_size - 1;
        m_tx_fifo->read_pos      = 0;
        m_tx_fifo->write_pos     = 0;
 
    nrf_drv_uart_config_t   config = NRF_DRV_UART_DEFAULT_CONFIG;

    config.baudrate =p_comm_params->baud_rate;
    config.hwfc = (p_comm_params->flow_control == 0) ?  NRF_UART_HWFC_DISABLED : NRF_UART_HWFC_ENABLED;   // 无硬件流控制
    config.interrupt_priority = irq_priority;   // 7
    config.parity = p_comm_params->use_parity ? NRF_UART_PARITY_INCLUDED : NRF_UART_PARITY_EXCLUDED;          // 无奇偶
    config.pselcts = p_comm_params->cts_pin_no;
    config.pselrts = p_comm_params->rts_pin_no;
    config.pselrxd = p_comm_params->rx_pin_no;      // P1.15
    config.pseltxd = p_comm_params->tx_pin_no;      // P1.10

    nrf_drv_uart_init(&app_uart_inst, &config, uart_event_handler); 
 
    m_rx_ovf = false;

    //把rx_buffer连接到uarterx的dma， 开启uarte rx                           //绿色大巴rx 对接dma rx
    //nrf_drv_uart_rx(&app_uart_inst, rx_buffer,1); 
         nrfx_uarte_rx(&app_uart_inst->uarte, rx_buffer,1);    

 --------------------

// 参数： &app_uart_inst,  &config,  uart_event_handler
             .inst_idx =0,          
             .uarte.p_reg         =  NRF_UARTE0
             .uarte.drv_inst_idx =  NRFX_UARTE0_INST_IDX   // 0
             .uart.p_reg           =  NRF_UART0     
             .uart.drv_inst_idx    =  NRFX_UART0_INST_IDX    // 0

数据流：uart_event_handler  -->  m_handlers[0]
数据流：0   -->  m_contexts[0]
nrf_drv_uart_init(  *p_instance, *p_config,  event_handler)
 
    uint32_t  inst_idx = p_instance->inst_idx;       // 0

    m_handlers[0] = event_handler;                   // uart_event_handler
    m_contexts[0] = p_config->p_context;          // null
 
    nrf_drv_uart_use_easy_dma[0] = p_config->use_easy_dma;  // 1
 
    nrf_drv_uart_config_t    config = *p_config; 
    config.p_context = inst_idx;   // 0

    ret_code_t result = 0;

    //if (NRF_DRV_UART_USE_UARTE)
       if( nrf_drv_uart_use_easy_dma[0] )                 //1    //yes    (已log验证) 
          nrfx_uarte_init(&p_instance->uarte,  &config,  uarte_evt_handler ); 

------------

// 参数： &app_uart_inst.uarte,  &config,  uarte_evt_handler
             .uarte.p_reg         =  NRF_UARTE0
             .uarte.drv_inst_idx =  NRFX_UARTE0_INST_IDX   // 0

数据流：uarte_evt_handler + 常量(lenth + state) -->  m_cb[0]      //给m_cb[0]赋值（发送和接收缓冲尚未赋值）  //把uarte_evt_handler挂靠到 西安旅行社
数据流： config  -->  寄存器
数据流：  nrfx_uarte_0_irq_handler  -->   irq_handlers[0]
数据流： nrfx_uarte_0_irq_handler  --> m_prs_box_4.handler ,   true -- m_prs_box_4.acquired 
nrfx_uarte_init( *p_instance,  *p_config,  event_handler)
 
    uarte_control_block_t * p_cb = &m_cb[0];       // p_instance->drv_inst_idx=0
 
    static nrfx_irq_handler_t  const irq_handlers[1] = { nrfx_uarte_0_irq_handler };   //NRFX_UARTE_ENABLED_COUNT=1

    //nrfx_prs_acquire( p_instance->p_reg,  irq_handlers[p_instance->drv_inst_idx] );   //数据流：nrfx_uarte_0_irq_handler  --> m_prs_box_4.handler
           nrfx_prs_acquire( NRF_UARTE0,  nrfx_uarte_0_irq_handler] );

    //配置串口引脚和波特率 
    apply_config(p_instance, p_config);     

    p_cb->handler   = event_handler;             //uarte_evt_handler
    p_cb->p_context = p_config->p_context;   //0

    if (p_cb->handler)
        interrupts_enable(p_instance, p_config->interrupt_priority);  //清中断标志，开启中断和优先级，使能中断
 
    nrf_uarte_enable(p_instance->p_reg);   //使能串口

    p_cb->rx_buffer_length           = 0;
    p_cb->rx_secondary_buffer_length = 0;
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
 
 ------------------------

 参数： NRF_UARTE0,  nrfx_uarte_0_irq_handler  
数据流： nrfx_uarte_0_irq_handler  --> m_prs_box_4.handler
nrfx_prs_acquire( * p_base_addr,  irq_handler) 

    //prs_box_t * p_box = prs_box_get(p_base_addr);
         p_box =  m_prs_box_4； 
             .handler = NULL 
             .acquired = false 

    if (p_box != NULL)

        if (p_box->acquired)
            busy = true;
        else                                                   //yes
            p_box->handler  = irq_handler;
            p_box->acquired = true;      

--------

功能： 判断NRF_UARTE0  和 NRFX_PRS_BOX_4_ADDR 是同一个地址（yes），然后返回m_prs_box_4 （待理解）
参数：  NRF_UARTE0
prs_box_t * prs_box_get(  * p_base_addr)
 
    //#define IS_PRS_BOX(n, p_base_addr)  ((p_base_addr) == NRFX_PRS_BOX_##n##_ADDR)
    #define IS_PRS_BOX(n, NRF_UARTE0)  (  NRF_UARTE0  == NRFX_PRS_BOX_##n##_ADDR)

    //if (IS_PRS_BOX(4, p_base_addr)) 
    if ( NRF_UARTE0  == NRFX_PRS_BOX_4_ADDR )      //yes

         //return &m_prs_box_4;  
              return m_prs_box_4 ； 
                    .handler = NULL 
                    .acquired = false 

-----------------------------------

// 功能： 配置串口引脚和波特率
// 参数： &app_uart_inst.uarte,  &config 
             .uarte.p_reg         =  NRF_UARTE0
             .uarte.drv_inst_idx =  NRFX_UARTE0_INST_IDX   // 0
             config.pselrxd =   P1.15
             config.pseltxd =  P1.10
             config.baudrate  = 119200

数据流： config  -- 寄存器
apply_config( * p_instance, * p_config) 
 
        nrf_gpio_pin_set(p_config->pseltxd);             //tx  P1.10， output  1
        nrf_gpio_cfg_output(p_config->pseltxd); 
 
        nrf_gpio_cfg_input(p_config->pselrxd, NRF_GPIO_PIN_NOPULL);                   //rx   P1.15 ， input  nopull

        nrf_uart_baudrate_set(p_instance->p_reg, p_config->baudrate);                            //设置波特率  19200
        nrf_uart_configure(p_instance->p_reg, p_config->parity, p_config->hwfc);              //设置，无奇偶校验，无硬件流控制
        nrf_uart_txrx_pins_set(p_instance->p_reg, p_config->pseltxd, p_config->pselrxd);   //设置uart的tx，rx引脚

   
-----------------

//功能： 把rx_buffer连接到uarterx的dma， 开启uarte rx                  //绿色大巴rx 对接dma rx
// 全局变量： &app_uart_inst 
             .inst_idx =0,          
             .uarte.p_reg         =  NRF_UARTE0
             .uarte.drv_inst_idx =  NRFX_UARTE0_INST_IDX   // 0

参数： app_uart_inst->uarte,  rx_buffer,  1
数据流： rx_buffer + len(=1) -->  m_cb[0]                                                                    //绿色大巴rx 挂靠 西安旅行社
数据流2： rx_buffer  -->  RXD.PTR， 1  -->  RXD.MAXCNT    //相当于dma的地址连接       //绿色大巴rx 对接dma rx
nrfx_uarte_rx(  * p_instance, * p_data,  length)                       //注意，这个函数并不只是初始化才调用，在接收数据时会反复调用
 
    uarte_control_block_t * p_cb = &m_cb[0];

    bool second_buffer = false;

    if (p_cb->handler)           //  yes， uart_error_handle
        //nrf_uarte_int_disable( NRF_UARTE0 , NRF_UARTE_INT_ERROR_MASK |  NRF_UARTE_INT_ENDRX_MASK);      //做相关配置前，先关闭这2个中断
               INTENCLR = 1<<9 | 1<<4;
    
    if ( p_cb->rx_buffer_length != 0 )         //第一次是no, 跳过     
        if ( p_cb->rx_secondary_buffer_length != 0 )            
            if (p_cb->handler)        //  yes， uart_error_handle             
                nrf_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ERROR_MASK |  NRF_UARTE_INT_ENDRX_MASK);
            return err_code;         
        second_buffer = true;     

    if (!second_buffer)     //第一次是yes 
        p_cb->rx_buffer_length = length;             //1
        p_cb->p_rx_buffer      = p_data;              //rx_buffer 
        p_cb->rx_secondary_buffer_length = 0;
 
    else   //no
        p_cb->p_rx_secondary_buffer = p_data;            //rx_buffer 
        p_cb->rx_secondary_buffer_length = length;      //1

    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDRX);   //或清除中断标志
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_RXTO);     //或清除中断标志

    //nrf_uarte_rx_buffer_set(NRF_UARTE0,  rx_buffer,  1 );                
        NRF_UARTE0->RXD.PTR    = rx_buffer;                                    //绿色大巴rx 对接dma rx
        NRF_UARTE0->RXD.MAXCNT =1;                                            //或dma中最大接收数量

    if (!second_buffer)    //第一次是yes
   
        //nrf_uarte_task_trigger(p_instance->p_reg, NRF_UARTE_TASK_STARTRX);
           TASK_STARTRX = 1;    //开启uarte 接收

    else    
        nrf_uarte_shorts_enable(p_instance->p_reg, NRF_UARTE_SHORT_ENDRX_STARTRX);
            SHORTS |= (1<<5);   //使能shortcut ， event ENDRX and task STARTRX之间的shortcut      //待理解  （或跟循环接收有关）


    if (m_cb[0].handler == NULL)   //no   （uart_error_handle）    
            。。。 
  
    else        //yes

        //nrf_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ERROR_MASK |   NRF_UARTE_INT_ENDRX_MASK);
              INTENSET = ERROR | ENDRX；   //使能这2个中断
 

===========================uart tx===================================


（游客）0x80 --上海旅行社（m_tx_fifo） --  黄色大巴tx（tx_buf） --  西安旅行社（mcb） --  绿色大巴tx（tx_buffer） -- TXD（公园） 

flow：

       app_uart_put  --  app_fifo_put --  fifo_put   --  nrf_drv_uart_tx   --  nrfx_uarte_tx_with_hold  --  nrf_uarte_tx_buffer_set  
       --   nrf_uarte_task_trigger

      ses_startup_nrf52840.s -- POWER_CLOCK_IRQHandler --  nrfx_power_clock_irq_handler  -- nrfx_prs_box_4_irq_handler  
      -- m_prs_box_4.handler -- nrfx_uarte_0_irq_handler -- uarte_irq_handler  --  tx_done_event  -- (p_cb->handler) -- uart_event_handler 


数据流： 0x80 --  (m_tx_fifo ) -- [ tx_buf + write_pos ]               // 把（游客）0x80 装上上海旅行社（m_tx_fifo） 的 黄色大巴tx（tx_buf）
数据流： (m_tx_fifo ) -- [ tx_buf + read_pos ]  --  tx_buffer        // 把上海旅行社（m_tx_fifo） 的  黄色大巴tx（tx_buf） 运送到  绿色大巴tx（tx_buffer）
数据流： tx_buffer + len -- mcb                                             // 把绿色大巴tx（tx_buffer）挂靠西安旅行社
数据流： mcb  -->  TXD.PTR， 1  -->  TXD.MAXCNT               // 把西安旅行社（mcb） --  绿色大巴tx（tx_buffer） 连接到 TXD（公园） 

-------------------------------------

main 
       app_uart_put(0x80);

=====---------------------------------------------

全局变量：m_tx_fifo
        m_tx_fifo->p_buf         =   tx_buf[256];
        m_tx_fifo->buf_size_mask = 256-1;
        m_tx_fifo->read_pos      = 0;
        m_tx_fifo->write_pos     = 0;

全局变量：app_uart_inst
       .inst_idx =APP_UART_DRIVER_INSTANCE，//0          
       .uarte.p_reg         =  NRF_UARTE0
       .uarte.drv_inst_idx =  NRFX_UARTE0_INST_IDX   //0

参数： 0x80
数据流： 0x80 --  (m_tx_fifo ) -- [ tx_buf + write_pos ]  --  [ tx_buf + read_pos ]  --  tx_buffer
app_uart_put(  byte )
 
    uint32_t err_code;

    //app_fifo_put(&m_tx_fifo, byte);
    //   fifo_put(m_tx_fifo, byte);

         //m_tx_fifo->p_buf[*->write_pos] = byte;     // 0x80 --  (m_tx_fifo ) --  tx_buf
             tx_buf[*->write_pos] = byte;      
          m_tx_fifo->write_pos++;
 
    //if (!nrf_drv_uart_tx_in_progress(&app_uart_inst))
    //    if(!nrfx_uarte_tx_in_progress(&p_instance->uarte);)
             if(!( m_cb[0].tx_buffer_length != 0) )                            //yes (第一次发送第一个字节，len=0)
 
               //把要发送的数据存入到tx_buffer 
               //app_fifo_get(&m_tx_fifo, tx_buffer);                        // m_tx_fifo  --  tx_buffer
                    tx_buffer = m_tx_fifo ->p_buf[ *->read_pos ];
                    m_tx_fifo >read_pos++;

               //连接到uart的tx dma， 开启uart的tx发送
               //nrf_drv_uart_tx(&app_uart_inst, tx_buffer, 1);                        //发送是一个一个发送的，发送一个后，如果还有数据，再来一个nrf_drv_uart_tx(&app_uart_inst, tx_buffer, 1);
               //   nrfx_uarte_tx(app_uart_inst->uarte,  tx_buffer,  1);
                        nrfx_uarte_tx_with_hold(app_uart_inst->uarte,  tx_buffer,  1, false);


--------------------------


功能：连接到uart的tx dma， 开启uart的tx发送
全局变量：app_uart_inst
       .inst_idx =APP_UART_DRIVER_INSTANCE，//0          
       .uarte.p_reg         =  NRF_UARTE0
       .uarte.drv_inst_idx =  NRFX_UARTE0_INST_IDX   //0

参数：  app_uart_inst->uarte,  tx_buffer,  1,  false
数据流： tx_buffer + len -- mcb 
数据流2： tx_buffer  -->  TXD.PTR， 1  -->  TXD.MAXCNT    //相当于dma的地址连接
nrfx_uarte_tx_with_hold(  * p_instance, *p_data,  length,  hold_xfer)
 
    uarte_control_block_t * p_cb = &m_cb[0];

    //if (!nrfx_is_in_ram(p_data))       //easy，跳过   （见其他参考）
        return err_code;

    //if (nrfx_uarte_tx_in_progress(p_instance))      //如果还有数据未发送完  （正在发送）
         if(!( m_cb[0].tx_buffer_length != 0) )                  
             return err_code;
   
    p_cb->tx_buffer_length = 1;                 //len  --  mcb[0]
    p_cb->p_tx_buffer      = tx_buffer;        // tx_buffer -- mcb[0]

    //清下面的两个中断标志 ENDTX 和 TXSTOPPED
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED);

    //nrf_uarte_tx_buffer_set( NRF_UARTE0, p_cb->p_tx_buffer, 1 );    //绿色大巴tx（tx_buffer）连接到TXD
        p_reg->TXD.PTR    =  tx_buffer;
        p_reg->TXD.MAXCNT = length;   //1

    if(!hold_xfer)              //yes     //hold_xfer是参数传入false （忽略）

        nrf_uarte_task_trigger(p_instance->p_reg, NRF_UARTE_TASK_STARTTX);
             p_reg->TASKS_STARTTX =1;        //开启uart tx发送


    if (p_cb->handler == NULL)   //no  ，忽略  （下面或是查询方式）
         。。。


=====-----------------------------------------------

功能： 清tx中断标志UARTE0->EVENT_ENDTX=0，停止tx（UARTE0->TASK_STOPTX.1=1），清零 m_cb[0].tx_buffer_length
  
可看作硬件中断入口程序 （详见上面的flow）
参数： NRF_UARTE0,  &m_cb[0] 
uarte_irq_handler( *p_uarte,  *p_cb)
 
    //---检查uarte中断的错误标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ERROR))     //UARTE0->EVENT_ERROR.0=1 , uarte接收错误
        （略）
  
    //---检查uarte中断的接收完成标志---
    else if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ENDRX))   
        （略）    

     //---检查uarte中断的接收超时标志---
   if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_RXTO))
        （略）

    //---检查uarte中断的发送完成标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ENDTX))
    
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ENDTX);   //清标志

        nrf_uarte_task_trigger(p_uarte, NRF_UARTE_TASK_STOPTX);   // UARTE0->TASK_STOPTX.1=1， 停止tx

        if (p_cb->tx_buffer_length != 0)     
   
            //tx_done_event(p_cb, nrf_uarte_tx_amount_get(p_uarte));   
                tx_done_event(p_cb,  UARTE0->TXD.AMOUNT );        //  1  
    

    //---检查uarte中断的发送停止标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_TXSTOPPED))
          （先忽略）

 
------------------------

功能： 清零 m_cb[0].tx_buffer_length  ，  +  ？ 

参数： p_cb,  UARTE0->TXD.AMOUNT
tx_done_event( * p_cb,   bytes)

    event.type             = NRFX_UARTE_EVT_TX_DONE;
    event.data.rxtx.bytes  = bytes;
    event.data.rxtx.p_data = p_cb->p_tx_buffer;

    p_cb->tx_buffer_length = 0;   //刚发送之前是1，现在置0

    //p_cb->handler(&event, p_cb->p_context);     
        uart_event_handler(&event, 0);     


-------------------

全局变量：
    event.type             = NRFX_UARTE_EVT_TX_DONE;
    event.data.rxtx.bytes  = bytes;      //len=1
    event.data.rxtx.p_data = p_data;   //p_cb->p_tx_buffer （tx_buffer）

功能：检查黄色大巴中是否还有人
参数： event， 0
uart_event_handler( * p_event,  * p_context)   

    switch (p_event->type)
  
        case NRF_DRV_UART_EVT_TX_DONE:

            //如果还有发送的数据（ m_tx_fifo长度>0）
            if (app_fifo_get(&m_tx_fifo, tx_buffer) == NRF_SUCCESS)      //黄色大巴tx中还有人没下车
            
                 nrf_drv_uart_tx(&app_uart_inst, tx_buffer, 1);     //回去再发送    //继续把乘客导出到公园
            
            else   //yes，这里测试一个字节发完就空了                     //黄色大巴tx已空无一人，则  （下面可忽略，实际未做任何处理）

                app_uart_event.evt_type = APP_UART_TX_EMPTY;

                //m_event_handler(&app_uart_event);
                     uart_error_handle(&app_uart_event);
        
-----

说明： 实际上没有对APP_UART_TX_EMPTY做任何处理
uart_error_handle( * p_event)

    if (p_event->evt_type == APP_UART_COMMUNICATION_ERROR)    
        APP_ERROR_HANDLER(p_event->data.error_communication);
    
    else if (p_event->evt_type == APP_UART_FIFO_ERROR)    
        APP_ERROR_HANDLER(p_event->data.error_code);



===========================uart rx===================================


（公园）RXD -- 西安旅行社（mcb） --  绿色大巴rx（rx_buffer）  --  上海旅行社（m_rx_fifo）  --  黄色大巴rx（rx_buf） -- 0x80（游客）


flow：
       
   main -- app_uart_init  --  APP_UART_FIFO_INIT -- app_uart_init  -- nrf_drv_uart_init  --  nrfx_uarte_init  -- nrf_drv_uart_rx
   -- app_uart_get -- 

  ses_startup_nrf52840.s -- POWER_CLOCK_IRQHandler --  nrfx_power_clock_irq_handler -- nrfx_prs_box_4_irq_handler 
  -- m_prs_box_4.handler--  nrfx_uarte_0_irq_handler -- uarte_irq_handler -- uart_event_handler 


数据流：  ( rx_buf )  --  buffers  -->  m_rx_fifo                            // 把黄色大巴rx（rx_buf）挂靠到 上海旅行社（m_tx_fifo）
数据流：  rx_buffer + len(=1) -->  m_cb                                    // 把绿色大巴rx（rx_buffer）挂靠在 西安旅行社（mcb）
数据流： rx_buffer  -->  RXD.PTR，   1  -->  RXD.MAXCNT        // 把绿色大巴rx（rx_buffer） 连接到 RXD(公园)

数据流：  m_rx_fifo->p_buf[read_pos]  --  rx_byte(0x80)            // 从上海旅行社（m_tx_fifo）的 黄色大巴rx（rx_buf）卸下 0x80（游客）   
 


---------------------------------------------------------------------------------------------------------------

main

    //app_uart_init();
        nrf_drv_uart_rx(&app_uart_inst, rx_buffer,1); 

    for (;;)

        uint8_t  rx_byte; 
        if (app_uart_get(&rx_byte) != NRF_SUCCESS)    //如果没有取到，则返回 for( ; ; )，重新运行
            continue;


----------------

参数：   params,  buffers， uart_error_handle,  7 
数据流： ( rx_buf )  --  buffers  -->  m_rx_fifo 
app_uart_init(  * p_comm_params,  *p_buffers,  event_handler,    irq_priority)

   ......

   nrf_drv_uart_rx(&app_uart_inst, rx_buffer,1); 

 
-----------------
 
//功能： 把rx_buffer连接到uarterx的dma， 开启uarte rx    // 把西安旅行社（mcb）的 绿色大巴rx（rx_buffer）跟RXD（公园）连接起来
// 参数： &app_uart_inst 
             .inst_idx =0,          
             .uarte.p_reg         =  NRF_UARTE0
             .uarte.drv_inst_idx =  NRFX_UARTE0_INST_IDX   // 0

参数： app_uart_inst->uarte,  rx_buffer,  1

数据流： rx_buffer + len(=1) -->  m_cb                                // 把绿色大巴rx（rx_buffer）挂靠在西安旅行社（mcb）
数据流： rx_buffer  -->  RXD.PTR， 1  -->  RXD.MAXCNT    // 把绿色大巴rx（rx_buffer） 连接到 RXD(公园)
nrfx_uarte_rx(  * p_instance, * p_data,  length)                      // 注意，这个函数并不只是初始化才调用，在接收数据时会反复调用
 
    uarte_control_block_t * p_cb = &m_cb[0];

    bool second_buffer = false;

    if (p_cb->handler)           //  yes，uarte_evt_handler
       //nrf_uarte_int_disable( NRF_UARTE0 , NRF_UARTE_INT_ERROR_MASK |  NRF_UARTE_INT_ENDRX_MASK);   //先关闭这2个中断
               INTENCLR = 1<<9 | 1<<4;
    
    if ( p_cb->rx_buffer_length != 0 )         //no, 跳过     
        if ( p_cb->rx_secondary_buffer_length != 0 )            
            if (p_cb->handler)        //  yes， uart_error_handle             
                nrf_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ERROR_MASK |  NRF_UARTE_INT_ENDRX_MASK);  //使能2个ERR中断
            return err_code;         
        second_buffer = true;     

    if (!second_buffer)     //yes 

        p_cb->rx_buffer_length = length;             //1
        p_cb->p_rx_buffer      = p_data;              //rx_buffer       // 把绿色大巴rx（rx_buffer）挂靠在西安旅行社（mcb）
        p_cb->rx_secondary_buffer_length = 0;
 
    else   //no
        p_cb->p_rx_secondary_buffer = p_data;     
        p_cb->rx_secondary_buffer_length = length;

    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDRX);   //或清除中断标志
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_RXTO);     //或清除中断标志

    //nrf_uarte_rx_buffer_set(NRF_UARTE0,  rx_buffer,  1 );      // 把绿色大巴rx（rx_buffer） 连接到 RXD(公园)
        NRF_UARTE0->RXD.PTR    = rx_buffer;                   
        NRF_UARTE0->RXD.MAXCNT =1;

    if (!second_buffer)    //yes
   
        //nrf_uarte_task_trigger(p_instance->p_reg, NRF_UARTE_TASK_STARTRX);
           TASK_STARTRX = 1;    //开启uarte 接收

    else     //no
        nrf_uarte_shorts_enable(p_instance->p_reg, NRF_UARTE_SHORT_ENDRX_STARTRX);
            SHORTS |= (1<<5);   //使能shortcut ， startrx 和 endrx之间的shortcut      //待理解


    if (m_cb[0].handler == NULL)   //no       
            。。。 
  
    else        //yes

        //nrf_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ERROR_MASK |   NRF_UARTE_INT_ENDRX_MASK);
              INTENSET = ERROR | ENDRX；   //使能这2个中断

 
-----------------------------------------------------------------------

数据流：  m_rx_fifo->p_buf[read_pos]  -- （rx_buffer） --  rx_byte
参数： rx_byte
app_uart_get( * p_byte)

    bool rx_ovf = m_rx_ovf;

    app_fifo_get(&m_rx_fifo, p_byte);     //m_rx_fifo -- rx_byte   //从上海旅行社（m_tx_fifo）的 黄色大巴rx（rx_buf）卸下 0x80（游客） 


    if (rx_ovf)      //--待理解  （或处理双buf）
     
        m_rx_ovf = false;
        nrf_drv_uart_rx(&app_uart_inst, rx_buffer, 1);


-------

参数： m_rx_fifo,  rx_byte
数据流：  m_rx_fifo->p_buf[read_pos]   --  rx_byte   //从上海旅行社（m_tx_fifo）的 黄色大巴rx（rx_buf）卸下 0x80（游客） 
app_fifo_get(  *p_fifo,  *p_byte )

    //if (FIFO_LENGTH() != 0)
        if( p_fifo->write_pos  -  *->read_pos >0 )     //如果黄色大巴rx中有人
    
        //fifo_get(p_fifo, p_byte);
        //   fifo_peek(p_fifo, 0, p_byte);
               *p_byte = p_fifo->p_buf[(*->read_pos + 0) & 255];      // m_rx_fifo -- rx_byte   //从上海旅行社（m_tx_fifo）的 黄色大巴rx（rx_buf）卸下 0x80（游客） 

           p_fifo->read_pos++;


=====-------------------------------------------------

可看作硬件中断入口 （ 详见上面的flow ）
参数： NRF_UARTE0,  &m_cb[0] 
uarte_irq_handler( *p_uarte,  *p_cb)
 
    //---检查uarte中断的错误标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ERROR))     //UARTE0->EVENT_ERROR.0=1 , uarte接收错误

        //清零错误标志
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ERROR);     //UARTE0->EVENT_ERROR.0=0，清零错误标志

        （略）

        //长度清零，错误处理
        p_cb->rx_buffer_length = 0;
        p_cb->rx_secondary_buffer_length = 0;

        //p_cb->handler(&event, p_cb->p_context);      
             uarte_evt_handler (&event, 0);       //转错误处理公路 （先忽略）
  
    //---检查uarte中断的接收完成标志---
    else if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ENDRX))
   
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ENDRX);      //UARTE0->EVENT_ENDRX.0=0，清零接收完成标志
        amount = nrf_uarte_rx_amount_get(p_uarte);                           //UARTE0->RXD.AMOUNT                                        //公园里面的人数

        if (amount == p_cb->rx_buffer_length)       //如果接收的数量，跟dma设置的数量相同，则下面 （如不相同，则忽略）
        
            if (p_cb->rx_secondary_buffer_length != 0)    //否，执行else
            
                uint8_t * p_data = p_cb->p_rx_buffer;

                //nrf_uarte_shorts_disable(p_uarte, NRF_UARTE_SHORT_ENDRX_STARTRX);   //删除自动触发的链接
                     NRF_UARTE0->SHORTS &= ~(1<<5);

                p_cb->rx_buffer_length = p_cb->rx_secondary_buffer_length;
                p_cb->p_rx_buffer = p_cb->p_rx_secondary_buffer;

                p_cb->rx_secondary_buffer_length = 0;

                rx_done_event(p_cb, amount, p_data);
            
            else            
                p_cb->rx_buffer_length = 0;     //清零

                //rx_done_event(p_cb, amount, p_cb->p_rx_buffer);   
                     rx_done_event( p_cb, 1, rx_buffer );   
                    
    
     //---检查uarte中断的接收超时标志---   （忽略）
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_RXTO))
 
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_RXTO);

        if (p_cb->rx_buffer_length != 0)
 
            p_cb->rx_buffer_length = 0;
            p_cb->rx_secondary_buffer_length = 0;

            rx_done_event(p_cb, nrf_uarte_rx_amount_get(p_uarte), p_cb->p_rx_buffer);   
 

---------

参数： &event, 0  
uarte_evt_handler(  *p_event,   *p_context)

    inst_idx = p_context;     //0

    nrf_drv_uart_event_t    event =

        .type = p_event->type,

        .data =      
            .error =           
                .rxtx =               
                    .p_data = p_event->data.error.rxtx.p_data,
                    .bytes  = p_event->data.error.rxtx.bytes,          
                .error_mask = p_event->data.error.error_mask,
 
    //m_handlers[0](&event, m_contexts[0]);
          uart_event_handler( &event, 0 );


--------

参数： p_cb, 1, p_cb->p_rx_buffer
rx_done_event( *p_cb,   bytes, * p_data)

    event.type             = NRFX_UART_EVT_RX_DONE;
    event.data.rxtx.bytes  = bytes;  //len=1
    event.data.rxtx.p_data = p_data;   //p_cb->p_rx_buffer（rx_buffer ）  //把西安旅行社（mcb）绿色大巴rx中的人装入出租车event

    //p_cb->handler(&event, p_cb->p_context);
         uart_event_handler(&event, 0);
 
---------------

全局变量：
    event.type             = NRFX_UART_EVT_RX_DONE;
    event.data.rxtx.bytes  = bytes;     //len=1
    event.data.rxtx.p_data = p_data;    //p_cb->p_rx_buffer（rx_buffer ）

参数： event， 0
数据流：m_cb.p_rx_buffer  --> event.data -->  m_rx_fifo->p_buf    //把西安旅行社（mcb）的 绿色大巴rx的人经出租车装入上海旅行社（m_tx_fifo）的黄色大巴rx（rx_buf）
uart_event_handler( * p_event,  * p_context) 

    switch (p_event->type)
  
        case NRF_DRV_UART_EVT_RX_DONE:    

            if(p_event->data.rxtx.bytes == 0)                        //如果是RXTO超时事件引起的RXDONE     
               nrf_drv_uart_rx(&app_uart_inst, rx_buffer, 1);     //重新开启接收
               break;            
            
            app_fifo_put(&m_rx_fifo, p_event->data.rxtx.p_data[0]);        //m_cb  -->  m_rx_fifo  //把西安旅行社（mcb）的 绿色大巴rx的人转车到上海旅行社（m_tx_fifo）的黄色大巴rx（rx_buf）

            if (err_code != NRF_SUCCESS)
            
                app_uart_event.evt_type          = APP_UART_FIFO_ERROR;
                app_uart_event.data.error_code   = err_code;

                //m_event_handler(&app_uart_event);
                      uart_error_handle(&app_uart_event);

            
            else if (FIFO_LENGTH(m_rx_fifo) != 0)
            
                app_uart_event.evt_type = APP_UART_DATA_READY;  //这个事件在错误处理函数中，或没有用到
                //m_event_handler(&app_uart_event);
                       uart_error_handle(&app_uart_event);           

            // Start new RX if size in buffer.
            if (FIFO_LENGTH(m_rx_fifo) <= m_rx_fifo.buf_size_mask)            
                nrf_drv_uart_rx(&app_uart_inst, rx_buffer, 1);
            
            else
            
                // Overflow in RX FIFO.
                m_rx_ovf = true;            



--------

数据流： (rx_buffer)  --> m_cb.p_rx_buffer  -->  m_rx_fifo->p_buf    //把西安旅行社（mcb）的 绿色大巴rx的人装入上海旅行社（m_tx_fifo）的黄色大巴rx（rx_buf）
参数： &m_rx_fifo,  p_cb->p_rx_buffer[0]    //rx_buffer[0]  
app_fifo_put( * p_fifo, byte)

    //if (FIFO_LENGTH() <= p_fifo->buf_size_mask)       //如果上海旅行社（m_tx_fifo）的黄色大巴rx（rx_buf）还没坐满
       if ( p_fifo->write_pos - *->read_pos <= 255)
   
        //fifo_put(p_fifo, byte);           
            p_fifo->p_buf[p_fifo->write_pos &255= byte;   //m_cb  --> m_rx_fifo    //把西安旅行社（mcb）的 绿色大巴rx的人装入上海旅行社（m_tx_fifo）的黄色大巴rx（rx_buf）
            p_fifo->write_pos++;


----------

uart_error_handle(* p_event)

    if (p_event->evt_type == APP_UART_COMMUNICATION_ERROR)    
        APP_ERROR_HANDLER(p_event->data.error_communication);
    
    else if (p_event->evt_type == APP_UART_FIFO_ERROR)    
        APP_ERROR_HANDLER(p_event->data.error_code);
 






===============================跳过的参考====keep=============================
 

    //if (!nrfx_is_in_ram(p_data))                                     //no, 跳过
        if ( rx_buffer & 0xE0000000 )  != 0x20000000)    
           return err_code; 

---------

 app_fifo_init(  * p_fifo,   * p_buf,  buf_size) 
 
    if (!IS_POWER_OF_TWO(buf_size))    //判断是否为2的n次方，如果不是则返回错误
        return err; 

    ......



