

待完成：   fifo 之一 ，  之二， 之三
待完成：    rx_buffer 之一 ，  之二， 之三
 

comm_params 
buffers
fifo （m_rx_fifo，m_tx_fifo）
config

app_uart_inst
m_handlers[0]，m_contexts[0]
m_cb
tx_buffer



=============== comm_params =============================


void uart_init(void)

    const app_uart_comm_params_t    comm_params =
      {
          RX_PIN_NUMBER,      //P1.10
          TX_PIN_NUMBER,      //P1.15
          RTS_PIN_NUMBER,    //P0.5
          CTS_PIN_NUMBER,    //0.7
          APP_UART_FLOW_CONTROL_DISABLED,
          false,
          DTM_BITRATE       //19200
      };


===============buffers=============================

        app_uart_buffers_t buffers;       //全局变量   

        buffers.rx_buf      = rx_buf;                                                               
        buffers.rx_buf_size = sizeof (rx_buf);                                                      
        buffers.tx_buf      = tx_buf;                                                              
        buffers.tx_buf_size = sizeof (tx_buf);    



==========fifo 之一 =====m_rx_fifo，m_tx_fifo 初始化=============================


app_uart_init(  * p_comm_params,  *p_buffers,  event_handler,    irq_priority)
 
    uint32_t err_code;
    m_event_handler = event_handler;
 
    //app_fifo_init(&m_rx_fifo, p_buffers->rx_buf, p_buffers->rx_buf_size); 
        m_rx_fifo->p_buf         =  p_buffers->rx_buf;   //rx_buf[]
        m_rx_fifo->buf_size_mask = p_buffers->rx_buf_size - 1;  //255
        m_rx_fifo->read_pos      = 0;
        m_rx_fifo->write_pos     = 0;

    //app_fifo_init(&m_tx_fifo, p_buffers->tx_buf, p_buffers->tx_buf_size);
        m_tx_fifo->p_buf         =  p_buffers->tx_buf;    //tx_buf[]
        m_tx_fifo->buf_size_mask = p_buffers->tx_buf_size - 1;   //255
        m_tx_fifo->read_pos      = 0;
        m_tx_fifo->write_pos     = 0;


 ===========fifo之二 ==== m_tx_fifo 赋值 ==== m_tx_fifo输出=========================

参数： 0x80
数据流： 0x80 --  (m_tx_fifo ) -- [ tx_buf + write_pos ]  --  [ tx_buf + read_pos ]  --  tx_buffer
app_uart_put(  byte )

    //app_fifo_put(&m_tx_fifo, byte);
         m_tx_fifo->p_buf[*->write_pos] = byte;    //0x80 
         m_tx_fifo->write_pos++;

    //if......

               //把要发送的数据存入到tx_buffer 
               //app_fifo_get(&m_tx_fifo, tx_buffer);                        // (m_tx_fifo ) --  tx_buf  --  tx_buffer
                    tx_buffer = m_tx_fifo->p_buf[ *->read_pos ];
                    m_tx_fifo >read_pos++;





=============== config =============================


app_uart_init(  * p_comm_params,  *p_buffers,  event_handler,    irq_priority)

    nrf_drv_uart_config_t   config = NRF_DRV_UART_DEFAULT_CONFIG;            
         config.p_context          = NULL,        //0                                            
 
          
    NRF_DRV_UART_DEFAULT_CONFIG_USE_EASY_DMA                                 

    config.baudrate =p_comm_params->baud_rate;
    config.hwfc = (p_comm_params->flow_control == 0) ?  NRF_UART_HWFC_DISABLED : NRF_UART_HWFC_ENABLED;   // 无硬件流控制
    config.interrupt_priority = irq_priority;   // 7
    config.parity = p_comm_params->use_parity ? NRF_UART_PARITY_INCLUDED : NRF_UART_PARITY_EXCLUDED;          // 无奇偶
    config.pselcts = p_comm_params->cts_pin_no;
    config.pselrts = p_comm_params->rts_pin_no;
    config.pselrxd = p_comm_params->rx_pin_no;      // P1.15
    config.pseltxd = p_comm_params->tx_pin_no;      // P1.10



=============== app_uart_inst =============================

static nrf_drv_uart_t app_uart_inst = NRF_DRV_UART_INSTANCE(APP_UART_DRIVER_INSTANCE);

             .inst_idx =0,          
             .uarte.p_reg         =  NRF_UARTE0
             .uarte.drv_inst_idx =  NRFX_UARTE0_INST_IDX   // 0
             .uart.p_reg           =  NRF_UART0     
             .uart.drv_inst_idx    =  NRFX_UART0_INST_IDX    // 0


=============== m_handlers[0]，m_contexts[0]  =============================

static nrf_uart_event_handler_t     m_handlers[INSTANCE_COUNT];     //INSTANCE_COUNT=2
static void *                               m_contexts[INSTANCE_COUNT];

nrf_drv_uart_init(  *p_instance, *p_config,  event_handler）

    m_handlers[0] = event_handler;                   // uart_event_handler
    m_contexts[0] = config->p_context;             // 0



=============== m_cb[0]  之一 ====init=========================

// 参数： &app_uart_inst.uarte,  &config,  uart_error_handle
nrfx_uarte_init( *p_instance,  *p_config,  event_handler)
 
    uarte_control_block_t * p_cb = &m_cb[0];       // p_instance->drv_inst_idx=0   

    p_cb->handler   = event_handler;              //uart_error_handle
    p_cb->p_context = p_config->p_context;    //0 

    p_cb->rx_buffer_length           = 0;
    p_cb->rx_secondary_buffer_length = 0;
    p_cb->tx_buffer_length           = 0;

    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;


    （mcb的三个buf没有赋值）


=============== m_cb[0] 之二  ====tx=========================


功能：连接到uart的tx dma， 开启uart的tx发送

参数：  app_uart_inst->uarte,  tx_buffer,  1,  false
数据流： tx_buffer + len -- mcb 
数据流2： tx_buffer  -->  TXD.PTR， 1  -->  TXD.MAXCNT    //相当于dma的地址连接
nrfx_uarte_tx_with_hold(  * p_instance, *p_data,  length,  hold_xfer)
 
    uarte_control_block_t * p_cb = &m_cb[0];
   
    p_cb->tx_buffer_length = 1;                //len  -->  mcb[0]
    p_cb->p_tx_buffer      = tx_buffer;        // tx_buffer --> mcb[0]
 
        （略）


=============== m_cb[0] 之三 ====rx=========================

参数： app_uart_inst->uarte,  rx_buffer,  1

nrfx_uarte_rx(  * p_instance, * p_data,  length)   
 
    uarte_control_block_t * p_cb = &m_cb[0];

    bool second_buffer = false; 

    //if (!second_buffer)     //yes 

        p_cb->rx_buffer_length = length;             //1
        p_cb->p_rx_buffer      = p_data;              //rx_buffer   （mcb赋值第一个buf）
        p_cb->rx_secondary_buffer_length = 0;
 
   //else   //no
   //    p_cb->p_rx_secondary_buffer = p_data;     
   //     p_cb->rx_secondary_buffer_length = length;


 ===========fifo之四 ==== m_cb[0] tx 长度清零 =============================

参数： NRF_UARTE0,  &m_cb[0] 

uarte_irq_handler( *p_uarte,  *p_cb)
 
    //---检查uarte中断的发送完成标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ENDTX))
    
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ENDTX);   //清标志

        nrf_uarte_task_trigger(p_uarte, NRF_UARTE_TASK_STOPTX);   // UARTE0->TASK_STOPTX.1=1， 停止tx

        if (p_cb->tx_buffer_length != 0)     
   
            //tx_done_event(p_cb, nrf_uarte_tx_amount_get(p_uarte));   
            //    tx_done_event(p_cb,  UARTE0->TXD.AMOUNT );       
                     p_cb->tx_buffer_length = 0;   //刚发送之前是1，现在置0    
    

 =============== m_cb[0] 之五 ====rx====uarte接收错误==接收超时===================

uarte_irq_handler( *p_uarte,  *p_cb)
 
    //---检查uarte中断的错误标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ERROR))     //UARTE0->EVENT_ERROR.0=1 , uarte接收错误

        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ERROR);     //UARTE0->EVENT_ERROR.0=0，清零错误标志

        //长度清零，错误处理
        p_cb->rx_buffer_length = 0;
        p_cb->rx_secondary_buffer_length = 0;


     //---检查uarte中断的接收超时标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_RXTO))
 
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_RXTO);    //清零超时标志

        if (p_cb->rx_buffer_length != 0) 
            p_cb->rx_buffer_length = 0; 
            p_cb->rx_secondary_buffer_length = 0;



=============== m_cb[0] 之六 ====rx====uarte接收完成=======================

//功能： 清零 m_cb.rx_buffer_length
uarte_irq_handler( *p_uarte,  *p_cb)

    //---检查uarte中断的接收完成标志---
    else if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ENDRX))
   
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ENDRX);      //UARTE0->EVENT_ENDRX.0=0，清零接收完成标志
        amount = nrf_uarte_rx_amount_get(p_uarte);                           //UARTE0->RXD.AMOUNT

        if (amount == p_cb->rx_buffer_length)   //如果接收的数量，跟dma设置的数量相同，则下面 （如不相同，则忽略）
        
            if (p_cb->rx_secondary_buffer_length != 0)    //否，执行else            
                （略）
            
            else            
                p_cb->rx_buffer_length = 0;     //清零

                rx_done_event(p_cb, amount, p_cb->p_rx_buffer);  //可忽略，因 NRFX_UARTE_EVT_RX_DONE未做任何处理
 



===================  tx_buffer 之一 ====赋值=====================

static uint8_t  tx_buffer[1];

参数： 0x80
数据流： 0x80 --  (m_tx_fifo ) -- [ tx_buf + write_pos ]  --  [ tx_buf + read_pos ]  --  tx_buffer
app_uart_put(  byte )

    //app_fifo_put(&m_tx_fifo, byte);
         m_tx_fifo->p_buf[*->write_pos] = byte;    //0x80 
         m_tx_fifo->write_pos++;

    //if......

               //把要发送的数据存入到tx_buffer 
               //app_fifo_get(&m_tx_fifo, tx_buffer);                        // (m_tx_fifo ) --  tx_buf  --  tx_buffer
                    tx_buffer = m_tx_fifo->p_buf[ *->read_pos ];
                    m_tx_fifo >read_pos++;



===================  tx_buffer 之二 ====输出到TXD.PTR=====================


功能：连接到uart的tx dma， 开启uart的tx发送

参数：  app_uart_inst->uarte,  tx_buffer,  1,  false
数据流： tx_buffer + len -- mcb 
数据流2： tx_buffer  -->  TXD.PTR， 1  -->  TXD.MAXCNT    //相当于dma的地址连接
nrfx_uarte_tx_with_hold(  * p_instance, *p_data,  length,  hold_xfer)
 
        （略）

    //nrf_uarte_tx_buffer_set( NRF_UARTE0, p_cb->p_tx_buffer, 1 );    //把tx_buffer连接到uartetx的dma
        p_reg->TXD.PTR    =  tx_buffer;
        p_reg->TXD.MAXCNT = length;

 





