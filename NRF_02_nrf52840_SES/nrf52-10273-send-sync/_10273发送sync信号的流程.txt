
===================定时器间隔发送数据流程==============================


------过程0 定时器timer3初始化（debug02_timer3.txt） -----

步骤01：设置timer3的irq总中断优先级2，使能timer3的irq总中断，定时器模式，bitwidth为32位，预分频为0，开启timer3。
步骤02: 绑定回调函数 timestamp_timer_event_handler
        m_cb[2].handler = timestamp_timer_event_handler
步骤03：取得空闲的CC0通道，捕获定时器值到cc0并计算新的CC0值，使能 COMPARE[0] 中断，设置新的cc0值。

步骤04: 绑定回调函数 sample_timer_event_handler
        sample_event_callbacks[0] = sample_timer_event_handler 


------过程1 uart1初始化（本文件） -----

步骤11：uart1初始化（只有tx功能）
        配置串口tx引脚p1.2和波特率，清中断标志，使能UARTE1的ENDTX等各个子中断，设置UARTE0的irq的优先级6，使能UARTE0的irq总中断，使能 NRF_UARTE1
        设置UARTE0的TX的引脚为p1.2，初始为高电平，输出，强驱动

步骤12：分配一个空闲的PPI通道 NRF_PPI_CHANNEL1，在ppi1的通道上，绑定timer3的CAMPARE0比较事件 和 UARTE0的STARTTX任务    
 
步骤13：绑定时间邮戳回调函数comms_uarte_execute_timestamp_synch
        timestamp_synch_execute_functions[0] = comms_uarte_execute_timestamp_synch


------过程2 定时器到点发送数据（debug02_timer3.txt） -----

步骤21：cc0定时触发了COMPARE0中断，清该中断标志，进入中断服务函数timestamp_timer_event_handler
步骤22：取得上一次最新的采样cc值sample_event_trigger_value（+5328）并保存，循环计算新的采样cc值sample_event_trigger_value，直到delta值>0；
        清除COMPARE[0]事件标志 ，使能 COMPARE[0] 中断，设置新的cc[0]值；

步骤23：调用comms_uarte_execute_timestamp_synch把新的cc0值即时间邮戳4字节打包作为同步信号包6个字节放入到TDR，等待发送（每3个cc0中断即每1毫秒发送1次)，
        暂不开启uart的tx发送，打开PPI1通道，自动触发PPI1的STARTTX任务，把sync信号的6个字节发送出去

步骤24：（转步骤31）



------过程3 uart1发送完毕的处理（本文件） -----

步骤31： uarte发送结束后触发中断标志ENDTX，清中断标志ENDTX，停止tx（TASK_STOPTX.1=1），清零 m_cb[0].tx_buffer_length，
步骤32：调用comms_uarte_handler，关闭ppi1通道

步骤33：（转“步骤21”）




