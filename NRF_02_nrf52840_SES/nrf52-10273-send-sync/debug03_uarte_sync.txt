
参考 ： 10036的dtm示例的debug2_uart.txt

疑问： 找不到.s文件中的中断入口函数UARTE0_UART0_IRQHandler的函数体


===================打印log===============================

extern nrfx_uarte_t comms_uarte;                 //--add 

nrfx_uarte_tx(&comms_uarte, &itest, 1);                //打印1个字节
while(nrfx_uarte_tx_in_progress(&comms_uarte));

注释掉comms_uarte_execute_timestamp_synch整个函数

------

#include "led_driver.hpp"     //--add
extern led_driver main_led;   //--add

main_led.set_basic(LED_DRIVER_ON_STEADY,RGB_BLUE(255));   //--test
main_led.event_queue_process();                           //--test


=================================== 关于PPI2的测试===============================


说明1：关于PPI2， 在本程序中实际上是没有用的，注释下面的语句后，板子照样可以正常运行，得到了测试验证


comms_uarte_init()
 
        ......

    //--//Align UARTE clock with timestamp clock
    //nrf_ppi_channel_t temp;
    //APP_ERROR_CHECK(nrfx_ppi_channel_alloc(&temp));
    //APP_ERROR_CHECK(nrfx_ppi_channel_assign(temp, nrfx_uarte_event_address_get(&comms_uarte, NRF_UARTE_EVENT_ENDTX), timestamp_get_timer_clear_task()));
    //APP_ERROR_CHECK(nrfx_ppi_channel_enable(temp));
    //uint8_t data = 0xFF;
    //APP_ERROR_CHECK(nrfx_uarte_tx(&comms_uarte, &data, 1));
    //while(nrfx_uarte_tx_in_progress(&comms_uarte));

    ////Reset PPI
    //APP_ERROR_CHECK(nrfx_ppi_channel_disable(temp));
    //--APP_ERROR_CHECK(nrfx_ppi_channel_free(temp));



=============================打印 uarte log的疑问============================================

说明1：加入timestamp_init_with_internal_sample_event这一句后，下面的nrf_delay_ms(100)会卡住
说明2：注释nrf_delay_ms(100)后，可打出log，但打一会儿就自动停下来

分析：或是while和timer3中断同时打印uarte tx，导致卡住
解决：只需注释掉comms_uarte_execute_timestamp_synch整个函数(定时发送synch信号)，其它地方都不需要注释

-----

主要是下面这句：
    timestamp_init_with_internal_sample_event(2);
       nrfx_timer_compare(&timer_timestamp, sample_event_compare_channel, sample_event_trigger_value, true);


原因是下面这句：

irq_handler(  * p_reg, * p_cb,  channel_count)

     //p_cb->handler(event, p_cb->context);
           timestamp_timer_event_handler(event, 0);      //COMPARE[0]中断服务函数


原因是下面这句：

timestamp_timer_event_handler(nrf_timer_event_t event_type, void* p_context)

    for( i = 0; i < timestamp_synch_execute_functions_num; i++)
       //timestamp_synch_execute_functions[i](sample_event_trigger_value);
          comms_uarte_execute_timestamp_synch( p_reg->CC[0] + 5328 + 5328 ）


-----

   while

        nrf_delay_ms(100);

        static uint8_t itest=0;
        itest++;
        nrfx_uarte_tx(&comms_uarte, &itest, 1);
        while(nrfx_uarte_tx_in_progress(&comms_uarte));




========================================= uarte ===init=====================================

游客(0xff) -- 西安旅行社(m_cb) -- 绿色大巴tx（data） --  TXD (公园)


flow:

     main -- comms_uarte_init -- (irq_handlers[0] = nrfx_uarte_0_irq_handler) -- (p_cb->handler = comms_uarte_handler)

     main -- comms_uarte_init -- nrfx_uarte_init -- apply_config -- interrupts_enable -- nrf_uarte_enable


下面这两个handler的区别是什么？ 答： nrfx_uarte_0_irq_handler是整个串口中断程序， comms_uarte_handler是前者里面的一个子程序
数据流：comms_uarte_handler --> m_cb,   0 -->  m_cb[1].p_context 
数据流：nrfx_uarte_0_irq_handler --> irq_handlers[0]
数据流：config --> 寄存器

数据流：NRF_PPI_CHANNEL1 --> ppi_channel_timestamp_capture （临时变量）

数据流：1<<NRF_PPI_CHANNEL1  --> m_channels_allocated
数据流：1<<NRF_PPI_CHANNEL2  --> m_channels_allocated， 0<<NRF_PPI_CHANNEL2  --> m_channels_allocated

数据流：comms_uarte_execute_timestamp_synch --> timestamp_synch_execute_functions[0]




----------------------------------

main
     
    comms_uarte_init();    



------------------

功能：配置串口引脚和波特率，清中断标志，使能UARTE1的ENDRX等各个子中断，设置UARTE0的irq的优先级，使能UARTE0的irq总中断，使能 NRF_UARTE1
      设置UARTE0的TX的引脚为p1.2，初始为高电平，输出，强驱动

      分配一个空闲的PPI通道 NRF_PPI_CHANNEL1，在ppi1的通道上，绑定timer3的CAPTURE0比较事件 和 UARTE0的STARTTX任务    

      分配第二个空闲的PPI通道 PPI2, 在PPI2的通道上，绑定UARTE0的ENDTX事件和timer3的CLEAR任务,使能PPI2                //PPI2无实际用处，可以注释掉      
      发送一个0xff字符，关闭PPI2通道

      赋值时间邮戳回调函数comms_uarte_execute_timestamp_synch给全局变量数组timestamp_synch_execute_functions[0]


全局变量： comms_uarte   
  NRFX_UARTE_INSTANCE(0)                        
    .p_reg        = NRF_UARTE0,             
    .drv_inst_idx = NRFX_UARTE0_INST_IDX   //0

全局变量 NRFX_TIMER_INSTANCE(3)                                   
                                                                 
    .p_reg            = NRF_TIMER3,             
    .instance_id      = NRFX_TIMER3_INST_IDX,  //2
    .cc_channel_count = TIMER3_CC_NUM,         //6

数据流：1<<NRF_PPI_CHANNEL1  --> m_channels_allocated
数据流：1<<NRF_PPI_CHANNEL2  --> m_channels_allocated， 0<<NRF_PPI_CHANNEL2  --> m_channels_allocated
数据流：comms_uarte_execute_timestamp_synch --> timestamp_synch_execute_functions[0]

comms_uarte_init()

    nrfx_uarte_config_t m_uart0_drv_config;

    m_uart0_drv_config.pselrxd = NRF_UARTE_PSEL_DISCONNECTED;
    m_uart0_drv_config.pseltxd = NRF_UARTE_PSEL_DISCONNECTED;
    m_uart0_drv_config.pselrts = NRF_UARTE_PSEL_DISCONNECTED;
    m_uart0_drv_config.pselcts = NRF_UARTE_PSEL_DISCONNECTED;
    m_uart0_drv_config.hwfc = NRF_UARTE_HWFC_DISABLED;
    m_uart0_drv_config.parity = NRF_UARTE_PARITY_EXCLUDED;
    m_uart0_drv_config.baudrate = NRF_UARTE_BAUDRATE_1000000;                                 //1M
    m_uart0_drv_config.interrupt_priority = NRFX_UARTE_DEFAULT_CONFIG_IRQ_PRIORITY;           //6


    //配置串口引脚和波特率，清中断标志，使能UARTE1的ENDRX等各个子中断，设置UARTE0的irq的优先级，使能UARTE0的irq总中断，使能 NRF_UARTE1
    nrfx_uarte_init(&comms_uarte, &m_uart0_drv_config, comms_uarte_handler);

     
    ------ set ppi1 ------

    //设置UARTE0的TX的引脚为p1.2，初始为高电平，输出，强驱动
    comms_uarte_set_tx_pin(OMMO_COMMS_UARTE_SYNCH_PIN);    //P1.2
       p_reg->OUTSET = 1 << pin;                           //设置P1.2为高电平
       p_reg->PSEL.TXD = pseltxd;  //P1.2                                             // 设置UARTE0的TX的引脚为p1.2
       p_reg->PSEL.RXD = pselrxd;  //null


    //分配一个空闲的PPI通道 NRF_PPI_CHANNEL1
    //nrfx_ppi_channel_alloc(&comms_uarte_tx_ppi);
        comms_uarte_tx_ppi = NRF_PPI_CHANNEL1;
        m_channels_allocated |= (1 <<0);  //m_channels_allocated.0 =1，用标志变量记录已分配通道


    //取得timer3的COMPARE0事件地址
    //AAA = timestamp_get_sample_event_address();
    //  AAA = nrfx_timer_event_address_get(&timer_timestamp, compare_events[sample_event_compare_channel]);
    //    AAA = nrfx_timer_event_address_get(&timer_timestamp, compare_events[0]);                               //先假设NRF_TIMER_CC_CHANNEL0
    //      AAA = nrf_timer_event_address_get( NRF_TIMER3, NRF_TIMER_EVENT_COMPARE0 );                               
              AAA = NRF_TIMER3 + NRF_TIMER_EVENT_COMPARE0 ;                             

    //取得uarte0的STARTTX任务地址
    //BBB = nrfx_uarte_task_address_get(&comms_uarte, NRF_UARTE_TASK_STARTTX);
        BBB = NRF_UARTE0.NRF_UARTE_TASK_STARTTX;


    //在ppi1的通道上，绑定timer3的CAPTURE0比较事件 和 UARTE0的STARTTX任务
    //nrfx_ppi_channel_assign( comms_uarte_tx_ppi, AAA, BBB );
    //  nrfx_ppi_channel_assign( NRF_PPI_CHANNEL1, AAA, BBB );
           NRF_PPI->CH[0].EEP = NRF_TIMER3 + NRF_TIMER_EVENT_COMPARE0;    //timer3的COMPARE0比较事件
           NRF_PPI->CH[0].TEP = NRF_UARTE0.NRF_UARTE_TASK_STARTTX;        //UARTE0的STARTTX任务


    ------ set PPI2 ------

    //分配第二个空闲的PPI通道 NRF_PPI_CHANNEL2  （待验证）
    nrfx_ppi_channel_alloc(&temp);
        temp = NRF_PPI_CHANNEL2;
        m_channels_allocated |= (1 <<1);  //m_channels_allocated.1 =1，用标志变量记录已分配通道

   //取得uarte0的ENDTX事件地址
   //CCC = nrfx_uarte_event_address_get(&comms_uarte, NRF_UARTE_EVENT_ENDTX);
       CCC =  NRF_UARTE0.NRF_UARTE_EVENT_ENDTX; 

   //取得timer3的CLEAR任务
   //DDD = timestamp_get_timer_clear_task();  
       DDD =NRF_TIMER3 + NRF_TIMER_TASK_CLEAR;

    // 绑定UARTE0的ENDTX事件和timer3的CLEAR任务
    //nrfx_ppi_channel_assign( temp, CCC , DDD );
       nrfx_ppi_channel_assign( NRF_PPI_CHANNEL2, CCC , DDD );
           NRF_PPI->CH[1].EEP = NRF_UARTE0.NRF_UARTE_EVENT_ENDTX;         //UARTE0的ENDTX事件 
           NRF_PPI->CH[1].TEP = NRF_TIMER3 + NRF_TIMER_TASK_CLEAR;        //timer3的CLEAR任务

    //使能PPI2 
    //nrfx_ppi_channel_enable(temp);
       nrfx_ppi_channel_enable(NRF_PPI_CHANNEL2);
           NRF_PPI->CHENSET = 1 << NRF_PPI_CHANNEL2;        //CHENSET.1 = 1,使能PPI2 （打开PPI2通道）

    //发送一个0xff字符
    data = 0xFF;
    //nrfx_uarte_tx(&comms_uarte, &data, 1);                      //把字符发送出去
        nrfx_uarte_tx_with_hold( comms_uarte, data, 1, false);
    //while(nrfx_uarte_tx_in_progress(&comms_uarte)) ;             //等待，直到发送完成 （dma自动发送完成后，在中断中会清零len）
       while(m_cb[0].tx_buffer_length != 0) 


    //关闭PPI2通道
    //nrfx_ppi_channel_disable(temp);
    //   nrf_ppi_channel_disable(NRF_PPI_CHANNEL2);
    //     NRF_PPI->CHENCLR = PPI_CHENCLR_CH0_Clear << NRF_PPI_CHANNEL2;  
              NRF_PPI->CHENCLR = 1 << 1;                                 //CHENCLR.1 = 1, 关闭PPI2通道


    //nrfx_ppi_channel_free(temp);

        //nrf_ppi_channel_disable(NRF_PPI_CHANNEL2);
           NRF_PPI->CHENCLR = 1 << 1;                                             //CHENCLR.1 = 1, 关闭PPI2通道

        //channel_allocated_clr(NRF_PPI_CHANNEL2);
        //  m_channels_allocated &= ~nrfx_ppi_channel_to_mask(NRF_PPI_CHANNEL2);
              m_channels_allocated &= ~(1<<1);                                     //m_channels_allocated.1=0


    //赋值时间邮戳回调函数comms_uarte_execute_timestamp_synch给全局变量数组timestamp_synch_execute_functions[0]
    //数据流：comms_uarte_execute_timestamp_synch --> timestamp_synch_execute_functions[0]
    //timestamp_add_synch_execute_function(comms_uarte_execute_timestamp_synch);
        timestamp_synch_execute_functions[timestamp_synch_execute_functions_num] = comms_uarte_execute_timestamp_synch;  //0
        timestamp_synch_execute_functions_num++;   //1


--------

功能：  分配一个空闲的PPI通道 NRF_PPI_CHANNEL1
数据流：NRF_PPI_CHANNEL1 --> ppi_channel_timestamp_capture （临时变量）
数据流：1<<NRF_PPI_CHANNEL1  --> m_channels_allocated

参数： ppi_channel_timestamp_capture        //NRF_PPI_CHANNEL1=0
nrfx_ppi_channel_alloc(  * p_channel)    

    nrf_ppi_channel_t channel;
    uint32_t mask = 0;

    mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;  //FFFFF

    for ( channel = NRF_PPI_CHANNEL1;  mask != 0;  channel++ )     //NRF_PPI_CHANNEL1=0
 
        BBB = mask & (1 <<channel) ;   //1<<0

        //CCC = !is_allocated_channel(channel);
        //  CCC = (m_channels_allocated & (1 << channel)) == 0;   //m_channels_allocated.0 =0 （尚未分配 NRF_PPI_CHANNEL1），固为true
              CCC = (0 & (1 << 0) == 0   //true

        if (  BBB && CCC  ) //yes
        
            //channel_allocated_set(channel);
               m_channels_allocated |= (1 <<0);  //m_channels_allocated.0 =1，用标志变量记录已分配通道

            *p_channel = channel; // ppi_channel_timestamp_capture = NRF_PPI_CHANNEL1

            break;    //如果找到了空闲通道，则退出for循环

         mask &= ~(1<<channel);  //mask.0=0,  清零已测试过的通道，继续下一个通道



----

全局变量： comms_uarte   
  NRFX_UARTE_INSTANCE(0)                        
    .p_reg        = NRF_UARTE0,             
    .drv_inst_idx = NRFX_UARTE0_INST_IDX   //0

功能：配置串口引脚和波特率，清中断标志，使能UARTE0的ENDRX等各个子中断，设置UARTE0的irq的优先级，使能UARTE0的irq总中断，使能 NRF_UARTE0

下面这两个handler的区别是什么？ 答： nrfx_uarte_0_irq_handler是整个串口中断程序， comms_uarte_handler是前者里面的一个子程序
数据流：comms_uarte_handler --> m_cb,   0 -->  m_cb[1].p_context 
数据流：nrfx_uarte_0_irq_handler --> irq_handlers[0]
数据流：config --> 寄存器

参数：comms_uarte, m_uart0_drv_config, comms_uarte_handler
nrfx_uarte_init( *p_instance,  * p_config,  event_handler)

    p_cb = &m_cb[0];

    //nrfx_irq_handler_t  irq_handlers[1] = { nrfx_uarte_0_irq_handler };  
        irq_handlers[0] = nrfx_uarte_0_irq_handler;
 

    //关联UART0的中断入口地址  （忽略跳过，因nrfx_uarte_0_irq_handler自己在.s文件中有定义,不需要关联  -- 待验证）
    nrfx_prs_acquire( NRF_UARTE0, irq_handlers[0]);    


    //配置串口引脚和波特率
    apply_config(p_instance, p_config);


    p_cb->handler   = event_handler;        //数据流：comms_uarte_handler --> m_cb
    p_cb->p_context = p_config->p_context;  //0


    //清中断标志，使能UARTE0的ENDRX等各个子中断，设置UARTE0的irq的优先级，使能UARTE0的irq总中断 
    if (p_cb->handler)
    
        //interrupts_enable(p_instance, 6);
        // interrupts_enable(comms_uarte, 6);        
              p_reg->INTENSET.4,8,9,17,22 = 1,1,1,1,1;       //使能UARTE0的ENDRX等各个子中断
              NVIC->IP[27]  =   6 << (8 - 3)  ;              //设置UARTE0的irq中断的优先级
              NVIC->ISER[(27 >> 5)] = (1 << 27);             //使能UARTE0的irq中断（总中断）    


    //使能 NRF_UARTE0
    nrf_uarte_enable(NRF_UARTE0);    
              p_reg->ENABLE = 8;


    p_cb->rx_buffer_length           = 0;
    p_cb->rx_secondary_buffer_length = 0;
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;


-----

功能：关联UART0的中断入口地址  （忽略跳过，因nrfx_uarte_0_irq_handler自己在.s文件中有定义,不需要关联 -- 待验证）

参数： NRF_UARTE0, irq_handlers[0]
nrfx_prs_acquire( * p_base_addr, irq_handler)


    //p_box = prs_box_get(p_base_addr); //NRF_UARTE0
        p_box =  NULL ；


    if (p_box != NULL)    //no, 不需要执行下面的语句
    
        bool busy = false;

        if (p_box->acquired)
        
            busy = true;
        
        else
        
            p_box->handler  = irq_handler;
            p_box->acquired = true;

    
-------

//功能： 判断NRF_UARTE0是否有对应的BOX地址地址 （这里返回null，表示没有）
参数： NRF_UARTE0
prs_box_get(* p_base_addr)

    //#define IS_PRS_BOX(n, p_base_addr)  ((p_base_addr) == NRFX_PRS_BOX_##n##_ADDR)
        #define IS_PRS_BOX(n, NRF_UARTE0)  ((NRF_UARTE0) == NRFX_PRS_BOX_##n##_ADDR)

        return NULL;



-----

//设置UARTE0的TX的引脚为p1.2，初始为高电平，输出，强驱动
参数：P1.2
comms_uarte_set_tx_pin(pin)

    //nrf_gpio_pin_set(pin);

       reg = nrf_gpio_pin_port_decode(&pin_number);
       //nrf_gpio_port_out_set(reg, 1 << pin);
          p_reg->OUTSET = 1 << pin;                      //设置P1.2为高电平

    nrf_gpio_cfg(pin, NRF_GPIO_PIN_DIR_OUTPUT, NRF_GPIO_PIN_INPUT_DISCONNECT, NRF_GPIO_PIN_NOPULL, NRF_GPIO_PIN_H0H1, NRF_GPIO_PIN_NOSENSE); //设置为输出，强驱动
   
    //nrf_uarte_txrx_pins_set( NRF_UARTE0, pin, NRF_UARTE_PSEL_DISCONNECTED);   //NRF_UARTE0
       p_reg->PSEL.TXD = pseltxd;  //P1.2                                             // 设置UARTE0的TX的引脚为p1.2
       p_reg->PSEL.RXD = pselrxd;  //null





========================================= uarte ===tx=====================================

游客(0xff) -- 绿色大巴tx（data） -- 西安旅行社(m_cb) --  TXD (公园)

flow:

    main --  nrfx_uarte_tx -- nrfx_uarte_tx_with_hold -- nrf_uarte_tx_buffer_set -- nrf_uarte_task_trigger -- nrfx_uarte_tx_in_progress


数据流：data   -->  m_cb[0].p_tx_buffer        -->  TXD.PTR            //绿大巴tx(data) -- 西安旅行社(m_cb) -- TXD (公园)    (相当于dma的地址连接)
数据流：len=1  -->  m_cb[0].tx_buffer_length   -->  TXD.MAXCNT        



-----------------------------------


全局变量： comms_uarte   
  NRFX_UARTE_INSTANCE(0)                        
    .p_reg        = NRF_UARTE0,             
    .drv_inst_idx = NRFX_UARTE0_INST_IDX   //0

全局变量 NRFX_TIMER_INSTANCE(3)                                   
                                                                 
    .p_reg            = NRF_TIMER3,             
    .instance_id      = NRFX_TIMER3_INST_IDX,  //2
    .cc_channel_count = TIMER3_CC_NUM,         //6



main



  while

  
     //-------test uarte log------

     static uint8_t data=0;
     data++;


    //把data连接到uart的tx dma， 开启uart的tx发送
    //nrfx_uarte_tx(&comms_uarte, &data, 1);
        nrfx_uarte_tx_with_hold( comms_uarte, data, 1, false);


    //等待，直到发送完成 （dma自动发送完成后，在中断中会清零len）
    //while(nrfx_uarte_tx_in_progress(&comms_uarte)) ;
       while(m_cb[0].tx_buffer_length != 0) ;
 

     nrf_delay_ms(100);

   ......




---------


功能：把data连接到uart的tx dma， 开启uart的tx发送

全局变量： comms_uarte   
  NRFX_UARTE_INSTANCE(0)                        
    .p_reg        = NRF_UARTE0,             
    .drv_inst_idx = NRFX_UARTE0_INST_IDX   //0

数据流：data   -->  m_cb[0].p_tx_buffer        -->  TXD.PTR            //绿大巴tx(data) -- 西安旅行社(m_cb) -- TXD (公园)    (相当于dma的地址连接)
数据流：len=1  -->  m_cb[0].tx_buffer_length   -->  TXD.MAXCNT        

参数：comms_uarte, data, 1, false
nrfx_uarte_tx_with_hold( * p_instance, *p_data, length, hold_xfer)


    p_cb = &m_cb[0];

    p_cb->tx_buffer_length = length;     //len  --  mcb[0]
    p_cb->p_tx_buffer      = p_data;     //data  --  mcb[0]


    //清下面的两个中断标志 ENDTX 和 TXSTOPPED
    nrf_uarte_event_clear( NRF_UARTE0, NRF_UARTE_EVENT_ENDTX);
    nrf_uarte_event_clear( NRF_UARTE0, NRF_UARTE_EVENT_TXSTOPPED);


    //把data连接到uart的tx dma
    nrf_uarte_tx_buffer_set( NRF_UARTE0, p_cb->p_tx_buffer, p_cb->tx_buffer_length); //绿色大巴tx（tx_buffer）连接到TXD
        p_reg->TXD.PTR    =  p_cb->p_tx_buffer;
        p_reg->TXD.MAXCNT = p_cb->tx_buffer_length;   //1


    if(!hold_xfer)              //yes     //hold_xfer是参数传入false  

        //nrf_uarte_task_trigger(p_instance->p_reg, NRF_UARTE_TASK_STARTTX);
             p_reg->TASKS_STARTTX =1;        //开启uart tx发送


    if (p_cb->handler == NULL)   //no  ，忽略  （下面或是查询方式）  //comms_uarte_handler
         。。。






==================================== uarte === tx irq===================================

flow:  

    ses_startup_nrf52840.s -- UARTE0_UART0_IRQHandler (待验证) -- nrfx_uarte_0_irq_handler -- uarte_irq_handler -- (p_cb->handler) -- comms_uarte_handler 
    -- nrf_uarte_event_clear -- nrf_uarte_task_trigger(stop)    



-----------------------------------------------------

可看作硬件中断入口 （ 详见上面的flow ）

nrfx_uarte_0_irq_handler( )

    uarte_irq_handler(NRF_UARTE0, &m_cb[0]);    //NRFX_UARTE0_INST_IDX=0



-----------

功能： 检查有中断标志ENDTX，清中断标志ENDTX，停止tx（TASK_STOPTX.1=1），清零 m_cb[0].tx_buffer_length，调用comms_uarte_handler，关闭ppi1通道

参数： NRF_UARTE0,  &m_cb[0] 
uarte_irq_handler( *p_uarte,  * p_cb)

    //---检查uarte中断的错误标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ERROR))
    
        nrfx_uarte_event_t event;

        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ERROR);

        event.type                   = NRFX_UARTE_EVT_ERROR;
        event.data.error.error_mask  = nrf_uarte_errorsrc_get_and_clear(p_uarte);
        event.data.error.rxtx.bytes  = nrf_uarte_rx_amount_get(p_uarte);
        event.data.error.rxtx.p_data = p_cb->p_rx_buffer;

        p_cb->rx_buffer_length = 0;
        p_cb->rx_secondary_buffer_length = 0;

        //关闭ppi1通道
        //p_cb->handler(&event, p_cb->p_context);  
        //  comms_uarte_handler(&event, p_cb->p_context);  
        //    nrfx_ppi_channel_disable(comms_uarte_tx_ppi);  //NRF_PPI_CHANNEL1
        //      nrf_ppi_channel_disable(NRF_PPI_CHANNEL1);
                  NRF_PPI->CHENCLR = PPI_CHENCLR_CH0_Clear <<  NRF_PPI_CHANNEL1;    //1<<0
    

    //---检查uarte中断的发送完成标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ENDTX))
    
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ENDTX);   //清标志

        nrf_uarte_task_trigger(p_uarte, NRF_UARTE_TASK_STOPTX);   // UARTE0->TASK_STOPTX.1=1， 停止tx

        if (p_cb->tx_buffer_length != 0)     

            //清零 m_cb[0].tx_buffer_length ，调用comms_uarte_handler，关闭ppi1通道
            //tx_done_event(p_cb, nrf_uarte_tx_amount_get(p_uarte));   
                tx_done_event(p_cb,  UARTE0->TXD.AMOUNT );        //  1  
        
    
    //---检查uarte中断的发送停止标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_TXSTOPPED))   
          （先忽略，easy）


------------------------

功能： 清零 m_cb[0].tx_buffer_length ，调用comms_uarte_handler 关闭ppi1通道

参数： p_cb,  1
tx_done_event( * p_cb,   bytes)

    event.type             = NRFX_UARTE_EVT_TX_DONE;
    event.data.rxtx.bytes  = bytes;                       //1
    event.data.rxtx.p_data = p_cb->p_tx_buffer;   

    p_cb->tx_buffer_length = 0;   //刚发送之前是1，现在置0

    //关闭ppi1通道
    //p_cb->handler(&event, p_cb->p_context);     
        comms_uarte_handler(&event, 0);     



----------

//关闭ppi1通道
comms_uarte_handler( *p_event,  *p_context)

    //nrfx_ppi_channel_disable(comms_uarte_tx_ppi);  //NRF_PPI_CHANNEL1
    //  nrf_ppi_channel_disable(NRF_PPI_CHANNEL1);
          NRF_PPI->CHENCLR = PPI_CHENCLR_CH0_Clear <<  NRF_PPI_CHANNEL1;    //1<<0






