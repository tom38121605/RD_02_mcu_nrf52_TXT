typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  nrf52833 Specific Interrupt Numbers  ========================================== */
  POWER_CLOCK_IRQn          =   0,              /*!< 0  POWER_CLOCK                                                            */
  RADIO_IRQn                =   1,              /*!< 1  RADIO                                                                  */
  UARTE0_UART0_IRQn         =   2,              /*!< 2  UARTE0_UART0                                                           */
  SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn=   3,  /*!< 3  SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0                                      */
  SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn=   4,  /*!< 4  SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1                                      */
  NFCT_IRQn                 =   5,              /*!< 5  NFCT                                                                   */
  GPIOTE_IRQn               =   6,              /*!< 6  GPIOTE                                                                 */
  SAADC_IRQn                =   7,              /*!< 7  SAADC                                                                  */
  TIMER0_IRQn               =   8,              /*!< 8  TIMER0                                                                 */
  TIMER1_IRQn               =   9,              /*!< 9  TIMER1                                                                 */
  TIMER2_IRQn               =  10,              /*!< 10 TIMER2                                                                 */
  RTC0_IRQn                 =  11,              /*!< 11 RTC0                                                                   */
  TEMP_IRQn                 =  12,              /*!< 12 TEMP                                                                   */
  RNG_IRQn                  =  13,              /*!< 13 RNG                                                                    */
  ECB_IRQn                  =  14,              /*!< 14 ECB                                                                    */
  CCM_AAR_IRQn              =  15,              /*!< 15 CCM_AAR                                                                */
  WDT_IRQn                  =  16,              /*!< 16 WDT                                                                    */
  RTC1_IRQn                 =  17,              /*!< 17 RTC1                                                                   */
  QDEC_IRQn                 =  18,              /*!< 18 QDEC                                                                   */
  COMP_LPCOMP_IRQn          =  19,              /*!< 19 COMP_LPCOMP                                                            */
  SWI0_EGU0_IRQn            =  20,              /*!< 20 SWI0_EGU0                                                              */
  SWI1_EGU1_IRQn            =  21,              /*!< 21 SWI1_EGU1                                                              */
  SWI2_EGU2_IRQn            =  22,              /*!< 22 SWI2_EGU2                                                              */
  SWI3_EGU3_IRQn            =  23,              /*!< 23 SWI3_EGU3                                                              */
  SWI4_EGU4_IRQn            =  24,              /*!< 24 SWI4_EGU4                                                              */
  SWI5_EGU5_IRQn            =  25,              /*!< 25 SWI5_EGU5                                                              */
  TIMER3_IRQn               =  26,              /*!< 26 TIMER3                                                                 */
  TIMER4_IRQn               =  27,              /*!< 27 TIMER4                                                                 */
  PWM0_IRQn                 =  28,              /*!< 28 PWM0                                                                   */
  PDM_IRQn                  =  29,              /*!< 29 PDM                                                                    */
  MWU_IRQn                  =  32,              /*!< 32 MWU                                                                    */
  PWM1_IRQn                 =  33,              /*!< 33 PWM1                                                                   */
  PWM2_IRQn                 =  34,              /*!< 34 PWM2                                                                   */
  SPIM2_SPIS2_SPI2_IRQn     =  35,              /*!< 35 SPIM2_SPIS2_SPI2                                                       */
  RTC2_IRQn                 =  36,              /*!< 36 RTC2                                                                   */
  I2S_IRQn                  =  37,              /*!< 37 I2S                                                                    */
  FPU_IRQn                  =  38,              /*!< 38 FPU                                                                    */
  USBD_IRQn                 =  39,              /*!< 39 USBD                                                                   */
  UARTE1_IRQn               =  40,              /*!< 40 UARTE1                                                                 */
  PWM3_IRQn                 =  45,              /*!< 45 PWM3                                                                   */
  SPIM3_IRQn                =  47               /*!< 47 SPIM3                                                                  */
} IRQn_Type;



---------------

#define TIMESTAMP_SYNCH_SOURCE_UART 0


typedef enum

    NRF_UARTE_EVENT_CTS       = offsetof(NRF_UARTE_Type, EVENTS_CTS),        
    NRF_UARTE_EVENT_NCTS      = offsetof(NRF_UARTE_Type, EVENTS_NCTS),       
    NRF_UARTE_EVENT_RXDRDY    = offsetof(NRF_UARTE_Type, EVENTS_RXDRDY),    // Data received in RXD (but potentially not yet transferred to Data RAM) 
    NRF_UARTE_EVENT_ENDRX     = offsetof(NRF_UARTE_Type, EVENTS_ENDRX),     // Receive buffer is filled up 


offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)

nrf_timer_cc_channel_t next_free_capture_channel = NRF_TIMER_CC_CHANNEL0;


typedef enum

    NRF_TIMER_CC_CHANNEL0 = 0,    // Timer capture/compare channel 0 


#define NRFX_PPI_PROG_APP_CHANNELS_MASK  ( 0x000FFFFFuL & ~(NRFX_PPI_CHANNELS_USED) )   //FF-FFF


nrfx_timer_t timer_timestamp = OMMO_TIMESTAMP_TIMER;

#define OMMO_TIMESTAMP_TIMER                   NRFX_TIMER_INSTANCE(3) 

#define NRFX_TIMER_INSTANCE(3)                                   
                                                                 
    .p_reg            = NRF_TIMER3,             
    .instance_id      = NRFX_TIMER3_INST_IDX, 
    .cc_channel_count = TIMER3_CC_NUM,           

#define PPI_CHENSET_CH0_Set (1UL) /*!< Write: Enable channel */


-------------------------------------------

#define NRFX_PPI_CHANNELS_USED  NRF_PPI_CHANNELS_USED   //0
#define NRF_PPI_CHANNELS_USED (SD_PPI_CHANNELS_USED | GZLL_PPI_CHANNELS_USED | ESB_PPI_CHANNELS_USED)  //0

    #define SD_PPI_CHANNELS_USED      0uL
    #define GZLL_PPI_CHANNELS_USED    0uL
    #define ESB_PPI_CHANNELS_USED     0uL 


typedef enum

    NRF_PPI_CHANNEL0  = PPI_CHEN_CH0_Pos,   //0
    NRF_PPI_CHANNEL1  = PPI_CHEN_CH1_Pos,   //1

       ......



capture_tasks[] = {NRF_TIMER_TASK_CAPTURE0, NRF_TIMER_TASK_CAPTURE1, NRF_TIMER_TASK_CAPTURE2, NRF_TIMER_TASK_CAPTURE3, NRF_TIMER_TASK_CAPTURE4, NRF_TIMER_TASK_CAPTURE5};





==========================================================================================



#define NRFX_PPI_PROG_APP_CHANNELS_MASK  ( 0x000FFFFF  & ~(NRFX_PPI_CHANNELS_USED))  // ~0

#define NRFX_PPI_CHANNELS_USED  NRF_PPI_CHANNELS_USED  //0
#define NRF_PPI_CHANNELS_USED (SD_PPI_CHANNELS_USED | GZLL_PPI_CHANNELS_USED | ESB_PPI_CHANNELS_USED)   // 0, 0, 0


    #define SD_PPI_CHANNELS_USED      0 
    #define GZLL_PPI_CHANNELS_USED    0 
    #define ESB_PPI_CHANNELS_USED     0 



========================================================================

--#define NRFX_PRS_BOX_0_ADDR     NRF_SPIM0
--#define NRF_SPIM0                   ((NRF_SPIM_Type*)          NRF_SPIM0_BASE)

#define NRF_UARTE1                  ((NRF_UARTE_Type*)         NRF_UARTE1_BASE)

#define nrfx_uarte_1_irq_handler    UARTE1_IRQHandler

---

ses_startup_nrf52833.s
_vectors:
  .word   UARTE1_IRQHandler


--------------------


nrfx_uarte_t comms_uarte = OMMO_COMMS_UARTE_SYNCH_UART;

nrfx_uarte_t comms_uarte_synch_uarte = OMMO_COMMS_UARTE_SYNCH_UART;

#define OMMO_COMMS_UARTE_SYNCH_UART           NRFX_UARTE_INSTANCE(1)
#define OMMO_COMMS_UARTE_SYNCH_PIN            NRF_GPIO_PIN_MAP(1,2) 


#define NRF_UARTE_PSEL_DISCONNECTED 0xFFFFFFFF


#define NRFX_UARTE_INSTANCE(1)                              
    .p_reg        = NRF_UARTE1,             
    .drv_inst_idx = NRFX_UARTE1_INST_IDX   //1


enum 
#if NRFX_CHECK(NRFX_UARTE0_ENABLED)         //yes
    NRFX_UARTE0_INST_IDX,                   //0

#if NRFX_CHECK(NRFX_UARTE1_ENABLED)         //yes
    NRFX_UARTE1_INST_IDX,                   //1



#define NRFX_UARTE_ENABLED 1
#define NRFX_UARTE0_ENABLED 1
#define NRFX_UARTE1_ENABLED 1


---------

typedef enum
{
    NRF_UARTE_EVENT_CTS       = offsetof(NRF_UARTE_Type, EVENTS_CTS),        
    NRF_UARTE_EVENT_NCTS      = offsetof(NRF_UARTE_Type, EVENTS_NCTS),       
    NRF_UARTE_EVENT_RXDRDY    = offsetof(NRF_UARTE_Type, EVENTS_RXDRDY),     
    NRF_UARTE_EVENT_ENDRX     = offsetof(NRF_UARTE_Type, EVENTS_ENDRX),      //here

    NRF_UARTE_EVENT_TXDRDY    = offsetof(NRF_UARTE_Type, EVENTS_TXDRDY),     
    NRF_UARTE_EVENT_ENDTX     = offsetof(NRF_UARTE_Type, EVENTS_ENDTX),      .
    NRF_UARTE_EVENT_ERROR     = offsetof(NRF_UARTE_Type, EVENTS_ERROR),     
    NRF_UARTE_EVENT_RXTO      = offsetof(NRF_UARTE_Type, EVENTS_RXTO),       
    NRF_UARTE_EVENT_RXSTARTED = offsetof(NRF_UARTE_Type, EVENTS_RXSTARTED),  
    NRF_UARTE_EVENT_TXSTARTED = offsetof(NRF_UARTE_Type, EVENTS_TXSTARTED),  
    NRF_UARTE_EVENT_TXSTOPPED = offsetof(NRF_UARTE_Type, EVENTS_TXSTOPPED)    
} nrf_uarte_event_t;











