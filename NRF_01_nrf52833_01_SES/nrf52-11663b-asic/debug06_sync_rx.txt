
 

=================================== ==================================

flow: 

    


----------------------------------

main

     
     
 
      

**------------


timestamp_is_synch_lost()
 

#ifndef RUN_WITHOUT_SYNC
    return timestamp_synch_lost;
#else
    return false;                  //false  -- 指不需要同步信号 (没有失去同步信号，相当于虚空增加了一个同步信号)
#endif
 
 
 
 ----------


task_loop_timer_function()

    task_loop_timer_execute = false;

    if(timestamp_is_synch_lost())
    
        basestation_lost_count++;
        if(basestation_lost_count > BASESTATION_LOST_TIMEOUT && data_mode == DATA_MODE_WIRELESS)
        
            disable_data_mode(true);
            set_leds();

    else
    
        basestation_lost_count = 0;
    

    ......



---------

sample_set_ready(uint8_t *data, uint16_t data_size, uint32_t timestamp, uint32_t timestamp_offset)

    //Wait until we are enabled and have synch
    if(data_mode == DATA_MODE_DISABLED || timestamp_is_synch_lost())
        return;

    if(data_mode == DATA_MODE_USB)
    
        //Calculate decoded packet size
        size_t packet_size = 1 + 4 + data_size;
 

        //Do COBS encoding, add packet delimiter(s) (0x00), and transmit via USB
        uint32_t code = usb_serial_write_data_packet_vargs(packet_size,
            1, &packet_id,
            4, &timestamp,
 
            data_size, data,
            0);

        if(code == NRF_ERROR_BUSY)
            skipped_tx_count++;
        else
            OMMO_APP_ERROR_CHECK(code, STRING("USB data transfer error"), 0);
    

    //Update count
    tx_count++;


----------


void task_loop_timer_function()
{
    //Clear flag
    task_loop_timer_execute = false;

    //Watch for BS lost
    if(timestamp_is_synch_lost())
    {
        basestation_lost_count++;
        if(basestation_lost_count > BASESTATION_LOST_TIMEOUT && data_mode == DATA_MODE_WIRELESS)
        {
            disable_data_mode(true);
            set_leds();
        }
    }
    else
    {
        basestation_lost_count = 0;
    }

    #ifdef OMMO_BUTTON_PIN
    //Watch for button to be released
    if(button_down && (nrfx_gpiote_in_is_set(OMMO_BUTTON_PIN)^OMMO_BUTTON_ACTIVE_STATE))
    {
        nrfx_timer_disable(&button_down_timer);
        nrfx_timer_clear(&button_down_timer);
        button_down = false;
    }
    #endif
}


-----------

set_leds()
 

    if(!usb_serial_state_port_open)
     
        main_led.set_basic(LED_MODE_USB_CLOSED, LED_COLOR_USB_CLOSED);     //白灯呼吸。usb串口关闭
     
    else if(usb_serial_state_port_open && data_mode == DATA_MODE_DISABLED) 
     
        if(led_state != 0x03)
         
            led_state = 0x03;
            main_led.set_basic(LED_MODE_USB_OPEN, LED_COLOR_USB_OPEN);    //蓝灯呼吸。usb串口打开，未进入DATA_MODE
         
    
    else if(timestamp_is_synch_lost())
     
        if(led_state != 0x04)
         
            led_state = 0x04;
            main_led.set_basic(LED_MODE_EN_SYNCH_LOST, LED_COLOR_EN_SYNCH_LOST);  //蓝灯快闪， 无同步信号
         
     
    else if(!timestamp_is_synch_wired())
     
        if(led_state != 0x06)
         
            led_state = 0x06;
 
            main_led.set_basic(LED_MODE_EN_SYNCH_WIRELESS, LED_COLOR_EN_SYNCH_WIRELESS); //绿灯呼吸，或无线同步信号
     
    else
    
        if(led_state != 0x07)
         
            led_state = 0x07;
            main_led.set_basic(LED_MODE_EN_SYNCH_WIRED, LED_COLOR_EN_SYNCH_WIRED);   // 绿灯常亮，有同步信号，正常通讯
         
     
---------

timestamp_is_synch_wired()

    return timestamp_synch_esb_ignore_count > 0;



































