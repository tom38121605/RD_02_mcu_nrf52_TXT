 

说明：在adc_cartes_setup_PPI_start_sample_packet中，发送comman指令 0x03，xyzt 读取xyzt（再每隔一段时间发送一次0x83， set + xyzt）

说明：在adc_cartes_start_data_read中，读取xyzt

说明：通过current_output_data发送到pc  （待整理）

current_output_data  -- frm 11952


============================================= asic 回调函数和PPI3 init =======================================================


flow：

   main -- adc_cartes_init -- (sample_set_ready_callback = sample_set_ready) -- (hot_plug_event_callback = Sample timestamp callback)



数据流： sample_set_ready            -->  sample_set_ready_callback
数据流： hot_plug_callback           -->  hot_plug_event_callback
数据流： sample_timer_event_handler  -->  sample_event_callbacks[0]   //是在timer3的中断里面用的 （如果放在timer3的初始化中更合适）



----------------------------------------------------------------------

main()


    adc_cartes_init(&sample_set_ready, &hot_plug_callback, &rtc_timeout);


-------------------------

功能：把PPI3装入到GROUP1中，把TIMER3的COMPARE0事件 、TWIM0的TX任务关联到PPI3

全局变量：
#define NRFX_TWIM_INSTANCE(0)                                                                                          
    .p_twim       = NRF_TWIM0,             
    .drv_inst_idx = NRFX_TWIM0_INST_IDX,   //0


数据流： sample_set_ready     -->  sample_set_ready_callback
数据流： hot_plug_callback    -->  hot_plug_event_callback
数据流： sample_timer_event_handler --> sample_event_callbacks[0]   //是在timer3的中断里面用的 （如果放在timer3的初始化中更合适）

参数：sample_set_ready, hot_plug_callback, rtc_timeout
adc_cartes_init(  sample_set_ready_callback_function,  hot_plug_cb,  *rtc_timeout_g)

    sample_set_ready_callback = sample_set_ready_callback_function;    //sample_set_ready
    hot_plug_event_callback = hot_plug_cb;                             //hot_plug_callback

    
    //设置timer3的中断服务函数
    //timestamp_add_sample_event_callback(sample_timer_event_handler);   //是在timer3的中断里面用的 （如果放在timer3的初始化中更合适）
        sample_event_callbacks[0] = sample_timer_event_handler;  
        sample_event_callbacks_num++;


    current_output_data = output_data_1;
    next_output_data = output_data_2;
    next_next_output_data = output_data_3;
    memset(output_data_1, 0x55, OMMO_SENSOR_MAX_PACKET_LENGTH);
    memset(output_data_2, 0x55, OMMO_SENSOR_MAX_PACKET_LENGTH);
    memset(output_data_3, 0x55, OMMO_SENSOR_MAX_PACKET_LENGTH);

    current_state = STATE_MACHINE_STOPPED;
    disable_twi_callback = false;
    stop_state_machine_bit = false;
    total_num_ics = 0;
    ppi_start_transfer_tasks_assigned = 0;
 
    mag_calibration_mode = true; 
    onboard_sensors_enabled = true;

    hot_plug_current_state_index = 0;
    hot_unplug_double_check = false;
    hot_plug_send_event = false;

    execute_sample_ready_callback = false;

    memset(ss_map, 0, sizeof(ss_map));
    num_ports_with_adc = 0;

    last_timestamp = current_timestamp = 0;
    last_timestamp_offset = current_timestamp_offset = 0;

    current_output_data_timestamp = 0;
    current_output_data_timestamp_offset = 0;

    set_reset_cnt = SET_RESET_SAMPLE_INTERVAL;   //do a set/reset first


    ......


    //分配一个空闲的PPI分组GROUP1
    //nrfx_ppi_group_alloc(&ppi_group_sample_start_spi);
        ppi_group_sample_start_spi = NRF_PPI_CHANNEL_GROUP1;


     twi_xfer_done[0] = true;

     //取得TWIM0_TX的任务地址
     //transfer_start_task_addr = nrfx_twim_start_task_get(&twi_peripherals[0], NRFX_TWIM_XFER_TX);      
          transfer_start_task_addr = NRF_TWIM0 + NRFX_TWIM_XFER_TX;


     //把PPI3装入到GROUP1中，把TIMER3的COMPARE0事件 、TWIM0的TX任务关联到PPI3
     //adc_cartes_add_task_to_ppi_start_transfer(transfer_start_task_addr);   
         ppi_channel_start_transfer[0] = PPI_CHANNEL3;   
                              
         NRF_PPI->CH[1].EEP = NRF_TIMER3 + NRF_TIMER_CC_CHANNEL0;         //TIMER3的COMPARE0事件
         NRF_PPI->CH[1].TEP = NRF_TWIM0 + NRFX_TWIM_XFER_TX;              //TWIM0的TX任务



-----

功能：把PPI3装入到GROUP1中，把TIMER3的COMPARE0事件、TWIM0的TX任务关联到PPI3

参数：NRF_TWIM0 + NRFX_TWIM_XFER_TX
adc_cartes_add_task_to_ppi_start_transfer( task_addr)

说明：因这里只调用1次，固ppi_start_transfer_tasks_assigned没有作用，可以忽略

    nrf_ppi_channel_t    ppi_channel;                  //局部变量

    if((ppi_start_transfer_tasks_assigned%2) != 0)  //no
    
        ......
    
    else  //yes
    
        //取得空闲的ppi通道PPI3
        //nrfx_ppi_channel_alloc(&ppi_channel);
           ppi_channel = PPI_CHANNEL3;

        //把PPI3装入到GROUP1中
        //nrfx_ppi_channel_include_in_group(ppi_channel, ppi_group_sample_start_spi);
           NRF_PPI->CHG[1] = 1<<3;                                                      

        //把PPI3赋值给全局变量ppi_channel_start_transfer[0]
        //ppi_channel_start_transfer[ppi_start_transfer_tasks_assigned/2] = ppi_channel;
           ppi_channel_start_transfer[0] = PPI_CHANNEL3; //3

        //把TIMER3的COMPARE0事件、TWIM0的TX任务关联到PPI3
        //nrfx_ppi_channel_assign(ppi_channel, timestamp_get_sample_event_address(), task_addr);
        //   nrfx_timer_event_address_get(&timer_timestamp, compare_events[sample_event_compare_channel]);
                NRF_PPI->CH[1].EEP = NRF_TIMER3 + NRF_TIMER_CC_CHANNEL0;         //TIMER3的COMPARE0事件
                NRF_PPI->CH[1].TEP = NRF_TWIM0 + NRFX_TWIM_XFER_TX;              //TWIM0的TX任务

    ppi_start_transfer_tasks_assigned++;


-----

数据流： NRF_PPI_CHANNEL_GROUP1 --> ppi_group_sample_start_spi   (因GROUP0被timer3用了，这是分配的事group1)
数据流： 1 << NRF_PPI_CHANNEL_GROUP1 --> m_groups_allocated

参数：  ppi_group_sample_start_spi
nrfx_ppi_group_alloc(  * p_group)

    mask = NRFX_PPI_ALL_APP_GROUPS_MASK;  //0x3f

    for (group = NRF_PPI_CHANNEL_GROUP0; mask != 0;  group++)              //NRF_PPI_CHANNEL_GROUP0=0

        //if ((mask & group_to_mask(group)) && (!is_allocated_group(group)))
           if ( (mask & (1<<0) ) && !( m_groups_allocated & (1<<0) )  //yes
       
            //group_allocated_set(group);
               m_groups_allocated |= 1<<0;

            *p_group = group;  //ppi_group_sample_start_spi = NRF_PPI_CHANNEL_GROUP1;

            break;

          mask &= ~group_to_mask(group);

    


============================================= asic 配置reg === init =======================================================


flow：



flow：

    main -- usb_serial_event_queue_process -- usb_serial_packet_received //-- adc_cartes_start_state_machine -- adc_cartes_state_change
    //-- adc_cartes_setup_PPI_start_sample_packet -- adc_cartes_start_data_read --  memcpy(current_output_data , m_twi_rx_buf)



数据流： 


---------------------------------------


main 

    usb_serial_event_queue_process();

        usb_serial_packet_received();




--------------------------------------------------------

功能：对接收包usb_serial_rx_packet_buffer(去掉了包头的的应用数据)处理  
参数：usb_serial_rx_packet_buffer, usb_serial_rx_packet_length  
usb_serial_packet_received( data[], length)

    ......
    

    response_length = process_packet_received(data, length, response_buffer, 1024); 
   
    ......


----------

参数：usb_serial_rx_packet_buffer, usb_serial_rx_packet_length ， response_buffer, 1024
process_packet_received( data[],   packet_size,  response_buffer[],  response_buffer_size)
 
    switch(data[0])
    
        case OMMO_COMMAND_DATA_DISABLE:
            if(data_mode == DATA_MODE_DISABLED)
            
                response_length = fill_in_ack_packet(response_buffer, OMMO_ACK_INVALID_MODE);
            
            else if(packet_size != 1)
            
                response_length = fill_in_ack_packet(response_buffer, OMMO_ACK_INVALID_DATA);
            
            else
            
                disable_data_mode(false);
                set_leds();

                response_length = fill_in_ack_packet(response_buffer, OMMO_ACK_SUCCESS);     
   

    if(response_length == 0) //Try general processor
        response_length = general_process_packet_received(data, packet_size, response_buffer, response_buffer_size);

    //If auto sampling, ignore all sensor commands
    if(response_length == 0) //Let sensors take a crack at the packet
        response_length = adc_cartes_process_packet_received(data, packet_size, response_buffer, response_buffer_size);


----------------

参数：usb_serial_rx_packet_buffer, usb_serial_rx_packet_length ， response_buffer, 1024
adc_cartes_process_packet_received(  data[], data_length, response_buffer[], response_buffer_size)

    if(data[0] == OMMO_COMMAND_SET_MAG_CAL_MODE)  //15
    
        if(data_length != 3 || data[1] != 0x55)
        
            return fill_in_ack_packet(response_buffer, OMMO_ACK_INVALID_DATA);  //2
        
        else        
            mag_calibration_mode = data[2];
            return fill_in_ack_packet(response_buffer, OMMO_ACK_SUCCESS);   //0
        
    
    else if(data[0] == OMMO_COMMAND_ONBOARD_SENSOR_ENABLE)     //24
    
        if(data_length != 2)
        
            return fill_in_ack_packet(response_buffer, OMMO_ACK_INVALID_DATA);
        
        else        
            onboard_sensors_enabled = data[1];
            return fill_in_ack_packet(response_buffer, OMMO_ACK_SUCCESS);
        
    
    else if(data[0] == OMMO_COMMAND_GET_PACKET_DESCRIPTOR)  //13
    
        if(current_state != STATE_MACHINE_STOPPED && current_state != IDLE_HOT_PLUG_CHECK)
        
            return fill_in_ack_packet(response_buffer, OMMO_ACK_INVALID_MODE);
        
        else        
            return adc_cartes_scan_bus_generate_data_descriptor(response_buffer, response_buffer_size);  //here
        
    
    else if(data[0] == OMMO_COMMAND_SENSOR_DISABLE)  //29
    
        if(data_length != 3 || data[1] >= OMMO_CARTES_ADC_NUM_PORTS)
        
            return fill_in_ack_packet(response_buffer, OMMO_ACK_INVALID_DATA);
        
        else        
            disable_adc_on_port[data[1]] = data[2];
            return fill_in_ack_packet(response_buffer, OMMO_ACK_SUCCESS);
        
    
    return device_info_process_packet_received(data, data_length, response_buffer, response_buffer_size, mag_calibration_mode);




--------------

功能：初始化配置asic的寄存器
adc_cartes_scan_bus_generate_data_descriptor( packet_id_request_buffer[],  buffer_size) 

   ......

   senors_twi_basic_instance[port]->write_byte_blocking( 0x63, 0x23, 0x00) ;                      //MSB bit 0: Vref 1.2V
   senors_twi_basic_instance[port]->write_byte_blocking( 0x63, 0x20, ADC_CARTES_REG_20_VAL(4);    //-- set the gain to 4x


   senors_twi_basic_instance[port]->read_byte_blocking(  0x63, 0x20, &reg_value[0]);
   senors_twi_basic_instance[port]->read_byte_blocking(  0x63, 0x21, &reg_value[1]);
 

---

参数：  0x63, 0x23, 0x00
数据流：0x00 --> REG23
twi_basic::write_byte_blocking( slave_addr, register_addr, data)

    write_data(slave_addr, register_addr, &data, 1, 0x00, true);

------

数据流：reg20 --> reg_value[0]
参数：  0x63, 0x20, &reg_value[0]
twi_basic::read_byte_blocking(uint8_t slave_addr, uint8_t register_addr, uint8_t* data)

    trx(slave_addr, &register_addr, 1, data, 1, 0x00, true);





============================================= asic  ===  read reg data ==================================================

flow：

    main -- usb_serial_event_queue_process -- usb_serial_packet_received -- adc_cartes_start_state_machine -- adc_cartes_state_change
    -- adc_cartes_setup_PPI_start_sample_packet -- adc_cartes_start_data_read --  memcpy(current_output_data , m_twi_rx_buf)


数据流：xyzt数据 --> m_twi_rx_buf[0] -->  current_output_data

--------------------


main 

    usb_serial_event_queue_process();

        usb_serial_packet_received();


------------------------------------------

功能：对接收包usb_serial_rx_packet_buffer(去掉了包头的的应用数据)处理  
参数：usb_serial_rx_packet_buffer, usb_serial_rx_packet_length  
usb_serial_packet_received( data[], length)

    switch(data[0])
    
        case OMMO_COMMAND_USB_DATA_ENABLE:            //32
            if(data_mode != DATA_MODE_DISABLED)
            
                usb_serial_send_ack(OMMO_ACK_INVALID_MODE);
            
            else if(length != 2)
            
                usb_serial_send_ack(OMMO_ACK_INVALID_DATA);
            
            else
            
                uint32_t rvalue = adc_cartes_start_state_machine();    //here ，处理正确的数据

                if(rvalue == NRF_SUCCESS)
                
                    packet_id = data[1];
                    data_mode = DATA_MODE_USB;                
                
                usb_serial_send_ack(convert_nrf_error_code_to_ommo_ack_code(rvalue));
                set_leds();
            
            return;
    
    response_length = process_packet_received(data, length, response_buffer, 1024); 
   
    if(response_length == 0) //No response, must be an unknown command
        response_length = fill_in_ack_packet(response_buffer, OMMO_ACK_UNKNOWN_COMMAND);

    //usb_serial_send_command_packet(response_buffer, response_length);
    //    usb_serial_send_command_packet_blocking(buffer, length, false);
             length = cobs_encode_usb_command_crc_post0(buffer, length, cobs_buffer);
             usb_serial_write_now(cobs_buffer, length, block);


---------------

adc_cartes_start_state_machine()

    adc_cartes_stop_state_machine();

    current_state = SETUP_ADC_START_SAMPLE;
    adc_cartes_state_change();


-------------------------------------




数据流：xyzt数据 --> m_twi_rx_buf[0] -->  current_output_data
adc_cartes_state_change()


    while(!wait_for_callback)
    
        switch(current_state)
        
            case SETUP_ADC_START_SAMPLE:

                for(port = 0; port < OMMO_CARTES_ADC_NUM_PORTS; port++)
                
                    adc_cartes_setup_PPI_start_sample_packet(port);  //发送command指令，准备读取相关的xyzt数据

                current_state = WAITING_FOR_ADC_START_SAMPLE_COMPLETION;

           case WAITING_FOR_ADC_START_SAMPLE_COMPLETION:
                
                //nrfx_ppi_group_disable(ppi_group_sample_start_spi);  //关闭 PPI GROUP1   
                   NRF_PPI->TASKS_CHG[1].DIS = 1;

  
                current_state_index = -1;        
                current_state = SETUP_NEXT_ADC_DATA_READ;
    

            case SETUP_NEXT_ADC_DATA_READ:

                current_state_index++;

                if(current_state_index < num_ports_with_adc)                

                    if(ADC_PRESENT(ports_with_adc[current_state_index]))
                        adc_cartes_start_data_read(ports_with_adc[current_state_index]);   //数据流：xyzt数据 --> m_twi_rx_buf[0]

                  current_state = WAITING_FOR_ADC_DATA_READ_COMPLETION;
                  wait_for_callback = true;
                
                else

                    current_state = SETUP_STATE_MACHINE_RESTART;

   
            case WAITING_FOR_ADC_DATA_READ_COMPLETION:   //  数据流：xyzt数据 --> m_twi_rx_buf[0]  -->  current_output_data
                
                if(ADC_PRESENT(ports_with_adc[current_state_index]))
                
                    len = ic_data[ss_map[ports_with_adc[current_state_index]]].data_length;
                    offset = ic_data[ss_map[ports_with_adc[current_state_index]]].data_offset;
                    memcpy(current_output_data + data_output_index[ports_with_adc[current_state_index]], m_twi_rx_buf[ports_with_adc[current_state_index]]+offset, len);        

                current_state = SETUP_NEXT_ADC_DATA_READ;
          

            case SETUP_STATE_MACHINE_RESTART:

                if(stop_state_machine_bit)
                
                    stop_state_machine_bit = false;
                    current_state = STATE_MACHINE_STOPPED;
                    wait_for_callback = true;
                
                else                                
                    swap_sample_buffers_and_flag_sample_callback();   //swap buffers        //here
                    current_state = SETUP_ADC_START_SAMPLE;


------------


功能：发送command指令到 reg00，准备读取相关的xyzt数据

adc_cartes_setup_PPI_start_sample_packet(  port)

    twi_xfer_done[port] = false;

    set_reset_cnt++;
    if(set_reset_cnt >= SET_RESET_SAMPLE_INTERVAL)
    
        m_twi_tx_buf[port][0] = ADC_CARTES_FIFO2_VAL_SET;   //0x83， set + xyzt
        set_reset_cnt = 0;
    
    else
    
        m_twi_tx_buf[port][0] = ADC_CARTES_FIFO2_VAL;        //0x03，xyzt
    

    senors_twi_basic_instance[port]->write_data(0x63, 0x00, m_twi_tx_buf[port], 1, NRFX_TWIM_FLAG_HOLD_XFER, false);  //写入command=03，读取xyzt



---------------------------


功能：读取相关的xyzt数据
数据流：xyzt数据 --> m_twi_rx_buf[0]
adc_cartes_start_data_read( port)

    twi_xfer_done[port] = false;

    senors_twi_basic_instance[port]->read_data_noaddr( 0x63, m_twi_rx_buf[port], ic_data[ss_map[port]].data_read_command_rx_len);  //xyzt数据 --> m_twi_rx_buf[0]







============================================= tx asic data to CDC uart =======================================================


flow:

    main -- adc_cartes_init -- (sample_set_ready_callback = sample_set_ready)

    main -- adc_cartes_event_queue_process -- (sample_set_ready_callback) -- sample_set_ready -- usb_serial_write_data_packet_vargs



数据流：xyzt数据 --> m_twi_rx_buf[0] -->  current_output_data  --> usb uart

-------------------------------------------------------------------------

main


       adc_cartes_init(&sample_set_ready, &hot_plug_callback, &rtc_timeout);


    while

        adc_cartes_event_queue_process();
 


==========---------------------------------------------------------------------------


数据流：xyzt数据 --> m_twi_rx_buf[0] -->  current_output_data
adc_cartes_state_change()

    while(!wait_for_callback)
    
        switch(current_state)
        
            case SETUP_ADC_START_SAMPLE:

                for(port = 0; port < OMMO_CARTES_ADC_NUM_PORTS; port++)                
                    adc_cartes_setup_PPI_start_sample_packet(port);  //发送command指令，准备读取相关的xyzt数据


            case SETUP_NEXT_ADC_DATA_READ:

                current_state_index++;

                if(current_state_index < num_ports_with_adc)                

                    if(ADC_PRESENT(ports_with_adc[current_state_index]))
                        adc_cartes_start_data_read(ports_with_adc[current_state_index]);   //数据流：xyzt数据 --> m_twi_rx_buf[0]

                  ......

   
            case WAITING_FOR_ADC_DATA_READ_COMPLETION:   //  数据流：xyzt数据 --> m_twi_rx_buf[0]  -->  current_output_data
                
                if(ADC_PRESENT(ports_with_adc[current_state_index]))
                
                    len = ic_data[ss_map[ports_with_adc[current_state_index]]].data_length;
                    offset = ic_data[ss_map[ports_with_adc[current_state_index]]].data_offset;
                    memcpy(current_output_data + data_output_index[ports_with_adc[current_state_index]], m_twi_rx_buf[ports_with_adc[current_state_index]]+offset, len);        

                current_state = SETUP_NEXT_ADC_DATA_READ;


==========---------------------------------------------------------------------------

全局变量：
#define NRFX_TWIM_INSTANCE(0)                                                                                          
    .p_twim       = NRF_TWIM0,             
    .drv_inst_idx = NRFX_TWIM0_INST_IDX,   //0

功能：选择I2C0, 配置I2C引脚，频率，回调函数
参数：sample_set_ready, hot_plug_callback, rtc_timeout
数据流：  NRFX_TWIM_INSTANCE(0) --> twi_peripherals[0] --> senors_twi_basic_instance[0].twi_peripheral 
adc_cartes_init(  sample_set_ready_callback_function,  hot_plug_cb,  *rtc_timeout_g)

    sample_set_ready_callback = sample_set_ready_callback_function;    //sample_set_ready
    hot_plug_event_callback = hot_plug_cb;                             //hot_plug_callback

    ......

    current_output_data = output_data_1;
    next_output_data = output_data_2;

    ......



------

功能：处理发送asic传感器数据到pc的任务
adc_cartes_event_queue_process()

    if(execute_sample_ready_callback)           

        //(*sample_set_ready_callback)(current_output_data, data_output_length, current_output_data_timestamp, current_output_data_timestamp_offset);
            sample_set_ready(current_output_data, data_output_length, current_output_data_timestamp, current_output_data_timestamp_offset);

        
        execute_sample_ready_callback = false;   


-----------


功能： 把asic的xyzt数据发送到pc
sample_set_ready( *data, data_size, timestamp, timestamp_offset)


    if(data_mode == DATA_MODE_USB)
    
        packet_size = 1 + 4 + data_size; 

        code = usb_serial_write_data_packet_vargs(packet_size,
            1, &packet_id, 
            4, &timestamp, 
            data_size, data,
            0);

***-----

数据流：virtualcomm_tx_buffer  --> usb_serial_tx_buffer_active
usb_serial_write_data_packet_vargs(  data_length, ...) 

    //output_length = COBS_ENCODING_MAXIMUM_POSSIBLE_LENGTH(data_length) + 1;    //Add 1 to give space for 0 packet terminator
       output_length = ( data_length +1 +data_length/256 ) + 1;    


    if( (usb_serial_tx_buffer_top + output_length) < 8192)      
        usb_serial_tx_buffer_top += output_length;


     va_list args;
     va_start(args, data_length);
     cobs_encode_post_zero_pad_vargs(usb_serial_tx_buffer_active + usb_serial_tx_buffer_top - output_length, output_length, args);
     va_end(args);
 
 

------------

数据流：virtualcomm_tx_buffer  --> usb_serial_tx_buffer_active
参数：p_start , args
cobs_encode_post_zero_pad_vargs(  *dst, dst_length, valist)

    void* cur_arg;
    int32_t cur_arg_len;
 
    u8 *end = dst + dst_length;
    u8 code, *code_ptr;  
 
    //StartBlock();
       code_ptr = dst++
       code     = 1;

    while(1)
    
        u32 arg_len = va_arg(valist, int32_t);   //这里用u32_t 不用u8_t ？   //--待理解

        if(arg_len == 0)  
            break;
 
        u8 *arg_data = va_arg(valist, uint8_t *);
 
        for(size_t b = 0; b < arg_len; b++)
        
            if (code != 0xFF)
            
                uint8_t c = *arg_data++;

                if (c != 0)
                
                    *dst++ = c;
                    code++;
                    continue;                
            

            //FinishBlock();
                *code_ptr = code

            //StartBlock();
                code_ptr = dst++
                code     = 1;
        
    
    //FinishBlock();
        *code_ptr = code

    ASSERT(dst <= end);

    while(dst < end) *dst++ = 0;




----------------------------


数据流：usb_serial_tx_buffer_active --> usb_serial_tx_buffer_primary
usb_serial_init( br_callback,  ev_callback)

    ......

    usb_serial_tx_buffer_active = usb_serial_tx_buffer_primary;



------

数据流：usb_serial_tx_buffer_active  -->  filled_buffer  -->  _io_context_write.pData
数据流2：usb_serial_tx_buffer_top  -->  filled_buffer_size   -->  _io_context_write.NumBytesToTransfer
usb_serial_event_queue_process()

    ASSERT(current_int_priority_get() == APP_IRQ_PRIORITY_THREAD);  //确认无已触发待处理的中断
    

    if(usb_serial_state_port_dtr && !usb_serial_state_port_open) //DTR打开，亮蓝灯
    
        ......(略)        


    //Check for data to transmit
    if(usb_serial_state_port_open)
 

        //Check if we have enough data to TX, or we need to force a packet out NOW
        if( (usb_serial_tx_buffer_top > OMMO_USB_SERIAL_MIN_PACKET_SIZE || (usb_serial_write_force && usb_serial_tx_buffer_top > 0)) &&
            !usb_serial_state_tx_in_progress)
        
            //Don't need to send anything again for at least 500ms            
            if(usb_serial_timeout_gen != NULL)
                APP_ERROR_CHECK(usb_serial_timeout_gen->reset_timeout(usb_serial_buffer_flush_timeout_channel));

            uint8_t *filled_buffer = usb_serial_tx_buffer_active;
            uint16_t filled_buffer_size = usb_serial_tx_buffer_top;

            //Switch buffers while DMA writes to USB port
            usb_serial_tx_buffer_top = 0x00;
            if(usb_serial_tx_buffer_active == usb_serial_tx_buffer_primary)
                usb_serial_tx_buffer_active = usb_serial_tx_buffer_secondary;
            else
                usb_serial_tx_buffer_active = usb_serial_tx_buffer_primary;

            //Buffer ready, start the write
            usb_serial_state_tx_in_progress = true;


            _io_context_write.NumBytesToTransfer = filled_buffer_size;
            _io_context_write.pData = filled_buffer;
            _io_context_write.pfOnComplete = USBD_WriteCompleteCb;

            //USBD_CDC_WriteAsync(_usb_cdc_inst, &_io_context_write, usb_serial_write_force);
                 USBD_WriteAsync(_aInst[hInst].EPIn, _io_context_write, usb_serial_write_force );  //here


            usb_serial_write_force = false;



 

 





  

==========================================参考2================================================

    

-----

adc_cartes_rw_finished()

    for(int32_t i=0; i<OMMO_CARTES_ADC_NUM_PORTS; i++)  //1
    
        if(!twi_xfer_done[i]) 
           return false;
















