
参考 ： 10036的dtm示例的debug2_uart.txt



=================================== uarte ===init===============================


（公园）RXD -- 西安旅行社（mcb） --  绿色大巴rx（rx_buffer）  --  上海旅行社（m_rx_fifo）  --  黄色大巴rx（rx_buf） -- byte（游客家里）
（游客家里）byte --上海旅行社（m_tx_fifo） --  黄色大巴tx（tx_buf） --  西安旅行社（mcb） --  绿色大巴tx（tx_buffer） -- TXD（公园）


flow:

     main -- comms_uarte_init -- (irq_handlers[1] = nrfx_uarte_1_irq_handler) -- (p_cb->handler = comms_uarte_handler)

     main -- comms_uarte_init -- nrfx_uarte_init -- apply_config -- nrfx_uarte_rx



数据流：comms_uarte_handler + 常量（len + state）-->  mcb
数据流：nrfx_uarte_1_irq_handler --> irq_handlers[1]
数据流：config --> 寄存器


----------------------------------

main
     
    comms_uarte_init(comms_uarte_synch_uarte, OMMO_COMMS_UARTE_SYNCH_PIN);   //P1.2



------------------


功能：取得timer3的空闲比较通道cc0，取得空闲的PPI通道0，在PPI0上把uarte1的ENDRX中断 和 timer3的CAPTURE0事件关联起来 ，使能PPI0

全局变量：comms_uarte_synch_uarte （和comms_uarte相同）
NRFX_UARTE_INSTANCE(1)                              
    .p_reg        = NRF_UARTE1,             
    .drv_inst_idx = NRFX_UARTE1_INST_IDX   //1

参数：comms_uarte_synch_uarte, P1.2
数据流： 常量 -->  m_uart0_drv_config
comms_uarte_init( uarte_instance, rx_pin)

    nrfx_uarte_config_t     m_uart0_drv_config;

    m_uart0_drv_config.pselrxd = rx_pin;                                            //P1.2
    m_uart0_drv_config.pseltxd = NRF_UARTE_PSEL_DISCONNECTED;
    m_uart0_drv_config.pselrts = NRF_UARTE_PSEL_DISCONNECTED;
    m_uart0_drv_config.pselcts = NRF_UARTE_PSEL_DISCONNECTED;
    m_uart0_drv_config.hwfc = NRF_UARTE_HWFC_DISABLED;
    m_uart0_drv_config.parity = NRF_UARTE_PARITY_EXCLUDED;
    m_uart0_drv_config.baudrate = NRF_UARTE_BAUDRATE_1000000;                         //1M波特率
    m_uart0_drv_config.interrupt_priority = NRFX_UARTE_DEFAULT_CONFIG_IRQ_PRIORITY;   //6


    nrfx_uarte_init(&comms_uarte, &m_uart0_drv_config, comms_uarte_handler);


    //设置PPI，以便在CC0的样本读取事件中捕获时间戳   
    //功能：把uarte1的ENDRX中断 和 timer3的CAPTURE0事件关联起来 
    //comms_uarte_local_ts_capture_channel = timestamp_add_capture_event(nrfx_uarte_event_address_get(&comms_uarte, NRF_UARTE_EVENT_ENDRX));   //待理解，先跳过

         //UARTE1.NRF_UARTE_EVENT_ENDRX事件地址
         //AAA = nrf_uarte_event_address_get( comms_uarte, NRF_UARTE_EVENT_ENDRX);
         //   AAA = nrf_uarte_event_address_get( NRF_UARTE1, NRF_UARTE_EVENT_ENDRX);
                 AAA = p_reg + event;                                                 //UARTE1.NRF_UARTE_EVENT_ENDRX事件地址

         //取得timer3的空闲比较通道cc0，取得空闲的PPI通道0，在PPI0上把uarte1的ENDRX中断 和 timer3的CAPTURE0事件关联起来 ，使能PPI0
         comms_uarte_local_ts_capture_channel = timestamp_add_capture_event(AAA);   //NRF_TIMER_CC_CHANNEL0


    //把comms_uarte_rx_buffer连接到RXD，dma一次最大可接收6个byte 开启uarte rx
    nrfx_uarte_rx(&comms_uarte, comms_uarte_rx_buffer, 6);


------------------

全局变量 NRFX_TIMER_INSTANCE(3)                                   
                                                                 
    .p_reg            = NRF_TIMER3,             
    .instance_id      = NRFX_TIMER3_INST_IDX, 
    .cc_channel_count = TIMER3_CC_NUM,           


功能：取得timer3的空闲比较通道cc0，取得空闲的PPI通道0，在PPI0上把uarte1的ENDRX中断 和 timer3的CAPTURE0事件关联起来 ，使能PPI0

数据流:  NRF_TIMER_CC_CHANNEL0 --> (capture_channel) --> comms_uarte_local_ts_capture_channel  //0

参数：NRF_UARTE1.NRF_UARTE_EVENT_ENDRX
timestamp_add_capture_event( trigger_event_addr)

    capture_channel = timestamp_get_capture_compare_channel();   //取得timer的空闲比较通道 NRF_TIMER_CC_CHANNEL0
    
    nrfx_ppi_channel_alloc(&ppi_channel_timestamp_capture); 
        ppi_channel_timestamp_capture = 0;                    //分配一个空闲的PPI通道 NRF_PPI_CHANNEL0


    //取得timer3的CAPTURE0事件地址，把uarte1的ENDRX中断 和 timer3的CAPTURE0事件关联起来
    //nrfx_ppi_channel_assign(ppi_channel_timestamp_capture, trigger_event_addr, nrfx_timer_task_address_get(&timer_timestamp, capture_tasks[capture_channel])));

       //DDD = nrfx_timer_task_address_get(&timer_timestamp, capture_tasks[NRF_TIMER_CC_CHANNEL0]))  
       //  DDD = nrfx_timer_task_address_get(&timer_timestamp,  NRF_TIMER_TASK_CAPTURE0 ))    
       //     DDD = nrf_timer_task_address_get( NRF_TIMER3, NRF_TIMER_TASK_CAPTURE0);        
                 DDD = NRF_TIMER3 + NRF_TIMER_TASK_CAPTURE0;  
 
       //把uarte1的ENDRX中断 和 timer3的CAPTURE0事件关联起来
       //nrfx_ppi_channel_assign(NRF_PPI_CHANNEL0,  NRF_UARTE1.NRF_UARTE_EVENT_ENDRX,  DDD  );
       //  nrfx_ppi_channel_assign( NRF_PPI_CHANNEL0,  NRF_UARTE1.NRF_UARTE_EVENT_ENDRX, NRF_TIMER3.NRF_TIMER_TASK_CAPTURE0 );
       //    nrf_ppi_channel_endpoint_setup(channel, eep, tep);
                NRF_PPI->CH[0].EEP = NRF_UARTE1.NRF_UARTE_EVENT_ENDRX;     //UARTE1的ENDRX事件
                NRF_PPI->CH[0].TEP = NRF_TIMER3.NRF_TIMER_TASK_CAPTURE0;   //timer3的CAPTURE0捕获任务


    //使能 PPI通道0
    //nrfx_ppi_channel_enable(ppi_channel_timestamp_capture);
    //   nrfx_ppi_channel_enable(NRF_PPI_CHANNEL0);
            nrf_ppi_channel_enable(NRF_PPI_CHANNEL0);
                NRF_PPI->CHENSET = 1 << NRF_PPI_CHANNEL0);        //使能PPI0 （打开ppi0通道）


    return capture_channel;    //NRF_TIMER_CC_CHANNEL0



--------

功能： 分配一个空闲的PPI通道 NRF_PPI_CHANNEL0
数据流：NRF_PPI_CHANNEL0 --> ppi_channel_timestamp_capture （临时变量）
数据流：1<<NRF_PPI_CHANNEL0  --> m_channels_allocated
参数： ppi_channel_timestamp_capture
nrfx_ppi_channel_alloc(  * p_channel)    

    nrf_ppi_channel_t channel;
    uint32_t mask = 0;

    mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;  //FFFFF

    for ( channel = NRF_PPI_CHANNEL0;  mask != 0;  channel++ )     //NRF_PPI_CHANNEL0=0
 
        BBB = mask & (1 <<channel) ;   //1<<0

        //CCC = !is_allocated_channel(channel);


        //  CCC = (m_channels_allocated & (1 << channel)) == 0;   //m_channels_allocated.0 =0 （尚未分配 NRF_PPI_CHANNEL0），固为true
              CCC = (0 & (1 << 0) == 0   //true

        if (  BBB && CCC  ) //yes
        
            //channel_allocated_set(channel);
               m_channels_allocated |= (1 <<0);  //m_channels_allocated.0 =1，用标志变量记录已分配通道

            *p_channel = channel; // ppi_channel_timestamp_capture = NRF_PPI_CHANNEL0

            break;    //如果找到了空闲通道，则退出for循环

         mask &= ~(1<<channel);  //mask.0=0,  清零已测试过的通道，继续下一个通道



-----

功能： 取得timer的空闲比较通道 NRF_TIMER_CC_CHANNEL0

timestamp_get_capture_compare_channel()

    rvalue = next_free_capture_channel;  //NRF_TIMER_CC_CHANNEL0

    next_free_capture_channel =  next_free_capture_channel + 1;

    return rvalue;





------------------

参数：comms_uarte, &m_uart0_drv_config, comms_uarte_handler                            
    .p_reg        = NRF_UARTE1,             
    .drv_inst_idx = NRFX_UARTE1_INST_IDX   //1

数据流：comms_uarte_handler + 常量（len + state）-->  mcb[1] ，  0 -->  m_cb[1].p_context 
数据流：nrfx_uarte_1_irq_handler --> irq_handlers[1]
数据流：config --> 寄存器
nrfx_uarte_init( * p_instance, * p_config,  event_handler)
 
    p_cb = &m_cb[p_instance->drv_inst_idx]; 

 
    irq_handlers[2] = { nrfx_uarte_0_irq_handler, nrfx_uarte_1_irq_handler };


    //nrfx_prs_acquire(p_instance->p_reg, irq_handlers[1]);        //没有返回成功  （忽略跳过）
       nrfx_prs_acquire(NRF_UARTE1, nrfx_uarte_1_irq_handler );  
     

    apply_config(p_instance, p_config);    //配置串口引脚和波特率

    p_cb->handler   = event_handler;         //comms_uarte_handler
    p_cb->p_context = p_config->p_context;   //0

    if (p_cb->handler)     
        interrupts_enable(p_instance, 6);    //清中断标志，开启中断和优先级，使能中断
    

    nrf_uarte_enable(p_instance->p_reg);  //使能 NRF_UARTE1

    p_cb->rx_buffer_length           = 0;
    p_cb->rx_secondary_buffer_length = 0;
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;



----------

功能：关联UART的中断入口地址  （忽略跳过，因nrfx_uarte_1_irq_handler自己在.s文件中有定义）
参数： NRF_UARTE1,  nrfx_uarte_1_irq_handler  
nrfx_prs_acquire( * p_base_addr,  irq_handler)  //忽略跳过 （ NRF_UARTE1 不需要 ）

    //prs_box_t * p_box = prs_box_get(p_base_addr);
         p_box =  NULL ；

    if (p_box != NULL)   //no, 不需要执行下面的语句

        if (p_box->acquired)
            busy = true;
        else                                                   
            p_box->handler  = irq_handler;
            p_box->acquired = true;      


---------

功能： 判断NRF_UARTE1  和 NRFX_PRS_BOX_0_ADDR 是否同一个地址
参数：  NRF_UARTE1
prs_box_t * prs_box_get(* p_base_addr)   //忽略跳过 （ NRF_UARTE1 不需要 ）
 
    //#define IS_PRS_BOX(n, p_base_addr)  ((p_base_addr) == NRFX_PRS_BOX_##n##_ADDR)
    #define IS_PRS_BOX(n, NRF_UARTE1 )  ( NRF_UARTE1  == NRFX_PRS_BOX_##n##_ADDR)
 
    //if (IS_PRS_BOX(0, p_base_addr)) 
    if ( NRF_UARTE1  == NRFX_PRS_BOX_0_ADDR )      //no
       return &m_prs_box_0;  

    else   //yes 
        return NULL;              


 

-------------



//功能：把rx_buffer连接到uarterx的dma，开启uarte rx    //绿色大巴rx 对接dma rx        // 把西安旅行社（mcb）的 绿色大巴rx（rx_buffer）跟RXD（公园）连接起来

全局变量： comms_uarte                             
    .p_reg        = NRF_UARTE1,             
    .drv_inst_idx = NRFX_UARTE1_INST_IDX   //1

参数： comms_uarte, comms_uarte_rx_buffer, 6
数据流： rx_buffer + len(=6) -->  m_cb[0]                        //绿色大巴rx 挂靠 西安旅行社
数据流： rx_buffer  -->  RXD.PTR， 6 -->  RXD.MAXCNT             //绿色大巴rx 对接dma rx

nrfx_uarte_rx(  * p_instance, * p_data,  length)    //注意，这个函数并不只是初始化才调用，在接收数据时会连续调用

    
    (见下面的uarte rx)

 
      


=================================== uarte === rx ===============================


（公园）RXD -- 西安旅行社（mcb） --  绿色大巴rx（rx_buffer）  --  上海旅行社（m_rx_fifo）  --  黄色大巴rx（rx_buf） -- byte（游客家里）

flow：

     main -- comms_uarte_init --  nrfx_uarte_init -- apply_config -- nrfx_uarte_rx

     ses_startup_nrf52833.s -- UARTE1_IRQHandler -- nrfx_uarte_1_irq_handler -- nrfx_uarte_1_irq_handler --



======-------------------------------------



//功能：把rx_buffer连接到uarterx的dma，开启uarte rx    //绿色大巴rx 对接dma rx        // 把西安旅行社（mcb）的 绿色大巴rx（rx_buffer）跟RXD（公园）连接起来

全局变量： comms_uarte                             
    .p_reg        = NRF_UARTE1,             
    .drv_inst_idx = NRFX_UARTE1_INST_IDX   //1

参数： comms_uarte, comms_uarte_rx_buffer, 6
数据流： rx_buffer + len(=6) -->  m_cb[0]                        //绿色大巴rx 挂靠 西安旅行社
数据流： rx_buffer  -->  RXD.PTR， 6 -->  RXD.MAXCNT             //绿色大巴rx 对接dma rx

nrfx_uarte_rx(  * p_instance, * p_data,  length)    //注意，这个函数并不只是初始化才调用，在接收数据时会连续调用

    p_cb = &m_cb[1];

    bool second_buffer = false;      

    if (p_cb->handler)    //comms_uarte_handler
        nrf_uarte_int_disable( NRF_UARTE1, NRF_UARTE_INT_ERROR_MASK | NRF_UARTE_INT_ENDRX_MASK);  //关闭2个中断

    
    if ( p_cb->rx_buffer_length != 0 )         //第一次是no, 跳过     
        if ( p_cb->rx_secondary_buffer_length != 0 )            
            if (p_cb->handler)        //  yes， uart_error_handle             
                nrf_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ERROR_MASK |  NRF_UARTE_INT_ENDRX_MASK);
            return err_code;         
        second_buffer = true;     

    if (!second_buffer)     //第一次是yes 
        p_cb->rx_buffer_length = length;              //6
        p_cb->p_rx_buffer      = p_data;              //rx_buffer 
        p_cb->rx_secondary_buffer_length = 0;
 
    else   //no
        p_cb->p_rx_secondary_buffer = p_data;            //rx_buffer 
        p_cb->rx_secondary_buffer_length = length;       //6

    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDRX);   //或清除中断标志
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_RXTO);     //或清除中断标志


    //nrf_uarte_rx_buffer_set(p_instance->p_reg, p_data, length);
        NRF_UARTE0->RXD.PTR    = rx_buffer;                                   //绿色大巴rx 对接dma rx
        NRF_UARTE0->RXD.MAXCNT =6;                                            //或dma中最大接收数量


    if (!second_buffer)    //第一次是yes
   
        //nrf_uarte_task_trigger(p_instance->p_reg, NRF_UARTE_TASK_STARTRX);
           TASK_STARTRX = 1;    //开启uarte 接收

    else    
        nrf_uarte_shorts_enable(p_instance->p_reg, NRF_UARTE_SHORT_ENDRX_STARTRX);
            SHORTS |= (1<<5);   //使能shortcut ， event ENDRX and task STARTRX之间的shortcut      //待理解  （或跟循环接收有关）


    if (m_cb[0].handler == NULL)   //no   （comms_uarte_handler）    
            。。。 
  
    else        //yes

        //nrf_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ERROR_MASK |   NRF_UARTE_INT_ENDRX_MASK);
              INTENSET = ERROR | ENDRX；   //使能这2个中断



======-------------------------------------

可看作硬件中断入口 （ 详见上面的flow ）

nrfx_uarte_1_irq_handler( )

    uarte_irq_handler(NRF_UARTE1, &m_cb[NRFX_UARTE1_INST_IDX]);


-----------


//功能： 清rx中断标志UARTE0->EVENT_ENDRX=0，清零 m_cb[0].rx_buffer_length， 取出接收到的数据长度，再调用rx_done_event中断服务程序 

参数： NRF_UARTE1,  &m_cb[1] 
数据流： UARTE1->RXD.AMOUNT    -->amount( 临时变量 )  
uarte_irq_handler(* p_uarte,  * p_cb)

    //---检查uarte中断的错误标志---
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ERROR))     //UARTE0->EVENT_ERROR.0=1 , uarte接收错误

        //清零错误标志
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ERROR);     //清零错误标志 (UARTE0->EVENT_ERROR.0=0)

        event.type                   = NRFX_UARTE_EVT_ERROR;
        event.data.error.error_mask  = nrf_uarte_errorsrc_get_and_clear(p_uarte);
        event.data.error.rxtx.bytes  = nrf_uarte_rx_amount_get(p_uarte);     // UARTE1->RXD.AMOUN
        event.data.error.rxtx.p_data = p_cb->p_rx_buffer;

        //长度清零，错误处理
        p_cb->rx_buffer_length = 0;
        p_cb->rx_secondary_buffer_length = 0;

        //p_cb->handler(&event, p_cb->p_context);      
             comms_uarte_handler (&event, 0);       //转中断服务处理 （先忽略）


    //---检查uarte中断的接收完成标志---
    else if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_ENDRX))
   
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_ENDRX);      //UARTE1->EVENT_ENDRX.0=0，清零接收完成标志
        amount = nrf_uarte_rx_amount_get(p_uarte);                           //UARTE1->RXD.AMOUNT    -->amount( 临时变量 )            //公园里面的人数

        if (amount == p_cb->rx_buffer_length)       //yes，如果接收的数量，跟dma设置的数量相同，则下面 （如不相同，则忽略）
        
            if (p_cb->rx_secondary_buffer_length != 0)    //否，执行else
            
                uint8_t * p_data = p_cb->p_rx_buffer;

                //nrf_uarte_shorts_disable(p_uarte, NRF_UARTE_SHORT_ENDRX_STARTRX);   //删除自动触发的链接
                     NRF_UARTE0->SHORTS &= ~(1<<5);

                p_cb->rx_buffer_length = p_cb->rx_secondary_buffer_length;
                p_cb->p_rx_buffer = p_cb->p_rx_secondary_buffer;

                p_cb->rx_secondary_buffer_length = 0;

                rx_done_event(p_cb, amount, p_data);
            
            else    //yes， 执行这里        
                p_cb->rx_buffer_length = 0;     //清零

                //rx_done_event(p_cb, amount, p_cb->p_rx_buffer);   
                     rx_done_event( p_cb, 1, comms_uarte_rx_buffer );   



     //---检查uarte中断的接收超时标志---   （忽略）
    if (nrf_uarte_event_check(p_uarte, NRF_UARTE_EVENT_RXTO))
 
        nrf_uarte_event_clear(p_uarte, NRF_UARTE_EVENT_RXTO);

        if (p_cb->rx_buffer_length != 0)
 
            p_cb->rx_buffer_length = 0;
            p_cb->rx_secondary_buffer_length = 0;

            rx_done_event(p_cb, nrf_uarte_rx_amount_get(p_uarte), p_cb->p_rx_buffer);  



-----------

数据流：p_cb->p_rx_buffer -- event（临时变量）   //把西安旅行社（mcb）绿色大巴rx中的人装入出租车event，在调用comms_uarte_handler中断服务程序

rx_done_event(  * p_cb,   bytes,   p_data)
 
    nrfx_uarte_event_t event;

    event.type             = NRFX_UARTE_EVT_RX_DONE;
    event.data.rxtx.bytes  = bytes;    //len=6
    event.data.rxtx.p_data = p_data;    //p_cb->p_rx_buffer（comms_uarte_rx_buffer）  //把西安旅行社（mcb）绿色大巴rx中的人装入出租车event


    //p_cb->handler(&event, p_cb->p_context);
        comms_uarte_handler( &event, 0);

 

--------------------

测试数据：05 6A 88 3C 1D 00

数据流：6A, 88, 3C, 1D   -->  dst[0,1,2,3]  
参数：event, p_cb->p_context
comms_uarte_handler(  *p_event,  *p_context) 

    uint32_t basestation_ts;

    if(p_event->type == NRFX_UARTE_EVT_RX_DONE)   //uarte1 接收完毕
     
        index = (comms_uarte_in_synch ? 0:1);   //如果comms_uarte_in_synch=1，则index的值为0

        if(comms_uarte_rx_buffer[index+5] == 0x00)  //buf[5]=0,说明收到同步信号
        
            comms_uarte_in_synch = true;           //同步信号置1

            //Grab basestation timestmap @ sample_time and roll forward by TIMESTAMP_SYNCH_BS_PERIOD to the correct time for our sample event
            cobs_decode(comms_uarte_rx_buffer+index, 5, &basestation_ts);  //取得 basestation_ts[4] = { 6A, 88, 3C, 1D }

            //Process timestamp
            //timestamp_synch_recieved(basestation_ts, timestamp_read_capture(comms_uarte_local_ts_capture_channel), TIMESTAMP_SYNCH_SOURCE_UART);
            //  timestamp_synch_recieved(basestation_ts, timestamp_read_capture(NRF_TIMER_CC_CHANNEL0), 0);  //NRF_TIMER_CC_CHANNEL0=0
                   timestamp_synch_recieved(basestation_ts, p_reg->CC[0], 0);   


            //开启下一次接收 
            nrfx_uarte_rx(&comms_uarte, comms_uarte_rx_buffer, 6);   //把comms_uarte_rx_buffer连接到RXD，开启uarte rx 
         
        else

            //把comms_uarte_rx_buffer连接到RXD，dma一次最大可接收6个byte 开启uarte rx         
            nrfx_uarte_rx(&comms_uarte, comms_uarte_rx_buffer, 7);
            comms_uarte_in_synch = false;
        
     
    else if(p_event->type == NRFX_UARTE_EVT_ERROR)
     
        comms_uarte_error_count++;

        //开启下一次接收
        nrfx_uarte_rx(&comms_uarte, comms_uarte_rx_buffer, 6);
 


----------

参数： basestation_ts, p_reg->CC[0], 0
timestamp_synch_recieved(  basestation_ts,  local_event_ts,  source)


    //TRACE_WITH_TIME(TRACE_ESB, COMMS_ESB_SIU_SYNCH_VALUE, basestation_ts);
    
    if(source == TIMESTAMP_SYNCH_SOURCE_ESB)   //1，no         //忽略，跳过
    
        ......

    else if(source == TIMESTAMP_SYNCH_SOURCE_UART)  //0, yes
    
        //Reset timestamp synch lost timer
        timestamp_reset_synch_lost_timer();

        //Ignore esb synch pulses if we are getting uart pulses
        bool was_wireless = !timestamp_is_synch_wired();
        timestamp_synch_esb_ignore_count = 16;
        if(timestamp_synch_lost_found_callback != NULL && was_wireless)
            timestamp_synch_lost_found_callback(!timestamp_synch_lost, true);
        
        tx_delay = TIMESTAMP_SYNCH_UART_TX_DELAY;
    


    //-1 accounts for the delay between the actual timer event and the PPI capture of the timer value
    basestation_ts -= 1;

    //Compute basestation/local offset
    timestamp_synch_offset = (basestation_ts + tx_delay) - local_event_ts;


-----

timestamp_reset_synch_lost_timer()

    timestamp_synch_received = true;

    if(timestamp_synch_lost_found_callback != NULL)   //yes
    
        //Reset timer to 1/2s out
        //timeout_gen->reset_timeout(timestamp_lost_compare_channel);
           timeout_gen->reset_timeout(0);

        if(timestamp_synch_lost)
        
            timestamp_synch_lost = false;

            //timestamp_synch_lost_found_callback(!timestamp_synch_lost, timestamp_synch_esb_ignore_count > 0);
            //  timestamp_synch_lost_found( 0, timestamp_synch_esb_ignore_count > 0);                              //参考debug07_rtc2.txt
                   set_leds();                

    
-------

功能：设置RTC2的cc[0]门槛值 ，清COMPARE[0]的事件标志，使能COMPARE[0]的事件和中断

参数：0
rtc_timeout_gen::reset_timeout(  channel)

   timeout_running[0] = true;
    
   //设置cc[0]门槛值 ，清COMPARE[0]的事件标志，使能COMPARE[0]的事件和中断
   //nrfx_rtc_cc_set(&timeout_rtc, channel, nrfx_rtc_counter_get(&timeout_rtc) + last_timeout_used[channel], true);
      nrfx_rtc_cc_set(&timeout_rtc, 0, NRF_RTC2->COUNTER + 16384, 1);



-------本函数参考 debug07_rtc2.txt------------

全局变量: rtc_timeout.timeout_rtc
NRFX_RTC_INSTANCE(2)                                   
                                                              
    .p_reg            =  NRF_RTC2 ,             
    .irq              =  RTC2_IRQn ,          
    .instance_id      =  NRFX_RTC2_INST_IDX ,   //1
    .cc_channel_count =  RTC2_CC_NUM,           //4


功能：设置cc[0]门槛值 ，清COMPARE[0]的事件标志，使能COMPARE[0]的事件和中断

参数： &timeout_rtc, 0, NRF_RTC2.COUNTER + 16384, 1
nrfx_rtc_cc_set( *p_instance, channel,  val, enable_irq)

    int_mask = RTC_CHANNEL_INT_MASK(channel);       // 1<<16  <<0
    event    = RTC_CHANNEL_EVENT_ADDR(channel);     // &EVENTS_COMPARE[0] + 0*4   //已理解

    //关闭EVENTS_COMPARE[0]的事件
    nrf_rtc_event_disable( NRF_RTC2, int_mask);  //EVTENCLR = 1<<16  <<0        

    //关闭EVENTS_COMPARE[0]的中断
    nrf_rtc_int_disable( NRF_RTC2, int_mask);     //INTENCLR = 1<<16  <<0

    val = RTC_WRAP(val);   // val &  FFFFFF         //已理解


    //设置cc[0]
    if (m_cb[1].reliable)  //0, no
   
        ......(忽略，参考)
   
    else  //yes
    
        //nrf_rtc_cc_set( NRF_RTC2, channel, val);
            p_reg->CC[0] = val;   //NRF_RTC2->COUNTER + 16384
    

    if (enable_irq)  //1
    
        nrf_rtc_event_clear( NRF_RTC2, event);      //NRF_RTC2.EVENTS_COMPARE[0] = 0 ，清EVENTS_COMPARE[0]的事件标志
        nrf_rtc_int_enable( NRF_RTC2, int_mask);    //INTENSET = 1<<16  <<0  , 使能EVENTS_COMPARE[0]的中断     

    nrf_rtc_event_enable( NRF_RTC2,int_mask);       //EVTENSET = 1<<16  <<0 , 使能EVENTS_COMPARE[0]的事件  



----------

测试数据：05 6A 88 3C 1D 00
功能：取得 basestation_ts[4] = { 6A, 88, 3C, 1D }   //0x1D3C886A

参数：comms_uarte_rx_buffer+index, 5, &basestation_ts(输出参数)
cobs_decode( *ptr,  length,  *dst)
	
        start = dst;

        end = ptr + length;

	code = 0xFF;  //待理解，先忽略
        copy = 0;     //可理解为ilen （数据长度）

        //上面的测试数据，会执行5次， 05 6A 88 3C 1D
	for (; ptr < end; copy--)   //第一次ptr指向05

        
            if (copy != 0)   //no，第一次copy=0  
            
                *dst++ = *ptr++;  //第2，3,4,5 次取得数据， dst[0,1,2,3] = { 6A, 88, 3C, 1D }
            
            else           //第一次 yes， 取得长度
            
                if (code != 0xFF)    //no，第一次code=0xFF   （待理解，先忽略 ）
                    *dst++ = 0;

                copy = code = *ptr++;  //第一次是 05 （或是取得len）

                if (code == 0)   //错误的长度及数据
                    break;               
            	
	return dst - start;    //忽略  （没有用到）











==============================================参考1===============keep===========================================================


    if(rx_pin != NRF_UARTE_PSEL_DISCONNECTED)
        nrf_gpio_cfg_input(rx_pin, NRF_GPIO_PIN_PULLUP);    //Prevents random rx events


---------------------






==============================================参考==========================================================================


  
      

**------------


timestamp_is_synch_lost()
 

#ifndef RUN_WITHOUT_SYNC
    return timestamp_synch_lost;
#else
    return false;                  //false  -- 指不需要同步信号 (没有失去同步信号，相当于虚空增加了一个同步信号)
#endif
 
 
 
 ----------


task_loop_timer_function()

    task_loop_timer_execute = false;

    if(timestamp_is_synch_lost())
    
        basestation_lost_count++;
        if(basestation_lost_count > BASESTATION_LOST_TIMEOUT && data_mode == DATA_MODE_WIRELESS)
        
            disable_data_mode(true);
            set_leds();

    else
    
        basestation_lost_count = 0;
    

    ......



---------

sample_set_ready(uint8_t *data, uint16_t data_size, uint32_t timestamp, uint32_t timestamp_offset)

    //Wait until we are enabled and have synch
    if(data_mode == DATA_MODE_DISABLED || timestamp_is_synch_lost())
        return;

    if(data_mode == DATA_MODE_USB)
    
        //Calculate decoded packet size
        size_t packet_size = 1 + 4 + data_size;
 

        //Do COBS encoding, add packet delimiter(s) (0x00), and transmit via USB
        uint32_t code = usb_serial_write_data_packet_vargs(packet_size,
            1, &packet_id,
            4, &timestamp,
 
            data_size, data,
            0);

        if(code == NRF_ERROR_BUSY)
            skipped_tx_count++;
        else
            OMMO_APP_ERROR_CHECK(code, STRING("USB data transfer error"), 0);
    

    //Update count
    tx_count++;


----------


void task_loop_timer_function()
{
    //Clear flag
    task_loop_timer_execute = false;

    //Watch for BS lost
    if(timestamp_is_synch_lost())
    {
        basestation_lost_count++;
        if(basestation_lost_count > BASESTATION_LOST_TIMEOUT && data_mode == DATA_MODE_WIRELESS)
        {
            disable_data_mode(true);
            set_leds();
        }
    }
    else
    {
        basestation_lost_count = 0;
    }

    #ifdef OMMO_BUTTON_PIN
    //Watch for button to be released
    if(button_down && (nrfx_gpiote_in_is_set(OMMO_BUTTON_PIN)^OMMO_BUTTON_ACTIVE_STATE))
    {
        nrfx_timer_disable(&button_down_timer);
        nrfx_timer_clear(&button_down_timer);
        button_down = false;
    }
    #endif
}


-----------

set_leds()
 

    if(!usb_serial_state_port_open)
     
        main_led.set_basic(LED_MODE_USB_CLOSED, LED_COLOR_USB_CLOSED);     //白灯呼吸。usb串口关闭
     
    else if(usb_serial_state_port_open && data_mode == DATA_MODE_DISABLED) 
     
        if(led_state != 0x03)
         
            led_state = 0x03;
            main_led.set_basic(LED_MODE_USB_OPEN, LED_COLOR_USB_OPEN);    //蓝灯呼吸。usb串口打开，未进入DATA_MODE
         
    
    else if(timestamp_is_synch_lost())
     
        if(led_state != 0x04)
         
            led_state = 0x04;
            main_led.set_basic(LED_MODE_EN_SYNCH_LOST, LED_COLOR_EN_SYNCH_LOST);  //蓝灯快闪， 无同步信号
         
     
    else if(!timestamp_is_synch_wired())
     
        if(led_state != 0x06)
         
            led_state = 0x06;
 
            main_led.set_basic(LED_MODE_EN_SYNCH_WIRELESS, LED_COLOR_EN_SYNCH_WIRELESS); //绿灯呼吸，或无线同步信号
     
    else
    
        if(led_state != 0x07)
         
            led_state = 0x07;
            main_led.set_basic(LED_MODE_EN_SYNCH_WIRED, LED_COLOR_EN_SYNCH_WIRED);   // 绿灯常亮，有同步信号，正常通讯
         
     
---------

timestamp_is_synch_wired()

    return timestamp_synch_esb_ignore_count > 0;

























































