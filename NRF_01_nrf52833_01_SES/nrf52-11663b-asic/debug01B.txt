
#define ADC_CARTES_SLAVE_ADDR       0x63
#define OMMO_CARTES_ADC_TWI_SCL_PINS      {NRF_GPIO_PIN_MAP(0,11)} //MOSI
#define OMMO_CARTES_ADC_SPI_SDA_PINS      {NRF_GPIO_PIN_MAP(0,6)} //CS0


-----------------

u32 twim_settings[] = { NRF_TWIM_FREQ_5p9K, NRF_TWIM_FREQ_9p8K, NRF_TWIM_FREQ_19p5K, NRF_TWIM_FREQ_29p3K, NRF_TWIM_FREQ_39p1K, NRF_TWIM_FREQ_100K,      //x-value
                    NRF_TWIM_FREQ_162K, NRF_TWIM_FREQ_250K, NRF_TWIM_FREQ_400K, NRF_TWIM_FREQ_600K, NRF_TWIM_FREQ_800K };

u32 twim_freqs[] = { 5900, 9800, 19500, 29300, 39100, 100000, 162000, 250000, 400000, 600000, 800000 };    //y-value


typedef enum
{
    NRF_TWIM_FREQ_5p9K =  0x 001E 0000 ,
    NRF_TWIM_FREQ_9p8K =  0x 0028 0000 ,
    NRF_TWIM_FREQ_19p5K = 0x 0050 0000 ,
    NRF_TWIM_FREQ_29p3K = 0x 0078 0000 ,
    NRF_TWIM_FREQ_39p1K = 0x 00A0 0000 ,
    NRF_TWIM_FREQ_100K =  0x 0198 0000 ,  
    NRF_TWIM_FREQ_162K =  0x 029F 0000 ,
    NRF_TWIM_FREQ_250K =  0x 0400 0000 ,  
    NRF_TWIM_FREQ_400K =  0x 0640 0000 ,   
    NRF_TWIM_FREQ_600K =  0x 0916 DFB0 ,  // 571 kbps.
    NRF_TWIM_FREQ_800K =  0x 0C38 0D40   

} nrf_twim_frequency_t;


------------------

#define OMMO_CARTES_ADC_TWI_PERIPHERALS   {NRFX_TWIM_INSTANCE(0),NRFX_TWIM_INSTANCE(1)}

const nrfx_twim_t twi_peripherals[]  = OMMO_CARTES_ADC_TWI_PERIPHERALS;

#define NRFX_TWIM_INSTANCE(0)                                                                                          
    .p_twim       = NRF_TWIM0,             
    .drv_inst_idx = NRFX_TWIM0_INST_IDX,   //0


#define OMMO_CARTES_ADC_NUM_PORTS 1



------------------------------


#define IC_DATA_DISABLED_INDEX 1
 
uint8_t ss_map[OMMO_CARTES_ADC_NUM_PORTS];      //1
 
uint8_t ports_with_adc[OMMO_CARTES_ADC_NUM_TWI_CHANNELS];    //2 


--------------

 

---------

#define OMMO_CARTES_ADC_NUM_PORTS 1
uint8_t ss_map[1];                       //OMMO_CARTES_ADC_NUM_PORTS



-------------


volatile ic_data_dictionary_entry   ic_data[] =   //volatile to ensure the struct in ram
{
    {IC_TYPE_NONE, false}, //Nothing present
    {IC_TYPE_NONE, true}, //Something present, but disabled
    {IC_TYPE_CARTES_VTRAN, false, ADC_CARTES_DATA_LENGTH, ADC_CARTES_DATA_OFFSET, true, {0}, 0, 12 + 0}
};

  typedef struct
  {
      uint8_t ic_type;                      // IC_TYPE_CARTES_VTRAN
      bool is_disabled;                     // false
      uint8_t data_length;                  // ADC_CARTES_DATA_LENGTH
      uint8_t data_offset;                  // DC_CARTES_DATA_OFFSET
      bool is_adc;                          // true
      uint8_t data_read_command[2];              // {0}
      uint8_t data_read_command_tx_len;          // 0
      uint8_t data_read_command_rx_len;          // 12+0
  } ic_data_dictionary_entry;



================================= class twi_basic ======================================

class twi_basic

    public:
        twi_basic(nrfx_twim_t twi_instance, rtc_timeout_gen *rtc_timeout_g);

    private:
        nrfx_twim_t          twi_peripheral;
        twi_basic_config_t   our_config;
        rtc_timeout_gen      *rtc_timeout;

-----

参数：OMMO_SENSOR_TWIM,  &rtc_timeout
twi_basic::twi_basic( twi_instance,  *rtc_timeout_g)

    twi_peripheral = twi_instance;   //OMMO_SENSOR_TWIM    //here
    rtc_timeout = rtc_timeout_g;     //rtc_timeout
  
    rtc_timeout->get_timeout_channel(&rtc_timeout_channel, static_timeout_handler, this);









