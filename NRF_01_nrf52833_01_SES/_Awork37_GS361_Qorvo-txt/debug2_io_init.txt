
// GPIO defs
#define IMU_IRQ               NRF_GPIO_PIN_MAP(0,4) 
#define BOOST_EN_PIN          NRF_GPIO_PIN_MAP(0,30) 
#define DW_PWRDN_PIN          NRF_GPIO_PIN_MAP(0,31) 


LCDÄ£¿é

#define BOOST_EN_PIN          NRF_GPIO_PIN_MAP(0,9) 
#define DW_PWRDN_PIN          NRF_GPIO_PIN_MAP(0,10) 


    nrf_gpio_cfg_input(DWIC_RST, NRF_GPIO_PIN_NOPULL);
    //nrf_gpio_cfg_input(DW1000_IRQ, NRF_GPIO_PIN_NOPULL);
    nrf_gpio_cfg_output(SPI_CS_PIN);
    nrf_gpio_pin_set(SPI_CS_PIN);

    nrf_gpio_cfg_output(BOOST_EN_PIN);
    nrf_gpio_pin_clear(BOOST_EN_PIN);


==================================================

int main(void)
{
  /* Initialization of all peripherals. */
  peripherals_init();

  port_wait(50);

  //port_i2c_scan(&m_twi);

  imu_init();

  blink_app();

  //production_main();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  }
}


-------------------


void peripherals_init(void)
{
    ret_code_t err_code ;

    // SysTick Initialization to 1ms
    SysTick_Config(SystemCoreClock / 1000);

    err_code = nrf_drv_gpiote_init();
    APP_ERROR_CHECK(err_code);

    nrf_gpio_cfg_input(DWIC_RST, NRF_GPIO_PIN_NOPULL);
    //nrf_gpio_cfg_input(DW1000_IRQ, NRF_GPIO_PIN_NOPULL);
    nrf_gpio_cfg_output(SPI_CS_PIN);
    nrf_gpio_pin_set(SPI_CS_PIN);

    nrf_gpio_cfg_output(BOOST_EN_PIN);
    nrf_gpio_pin_clear(BOOST_EN_PIN);
    
    //nrf_drv_gpiote_in_config_t in_config = GPIOTE_RAW_CONFIG_IN_SENSE_LOTOHI(true);
    nrf_drv_gpiote_in_config_t in_config = GPIOTE_CONFIG_IN_SENSE_LOTOHI(true);
    in_config.pull = NRF_GPIO_PIN_NOPULL;
    err_code = nrf_drv_gpiote_in_init(DW1000_IRQ, &in_config, dw1000_irq_handler);
    APP_ERROR_CHECK(err_code);
    nrf_drv_gpiote_in_event_enable(DW1000_IRQ, true);
 
    err_code = nrf_drv_gpiote_in_init(IMU_IRQ, &in_config, imu_irq_handler);
    APP_ERROR_CHECK(err_code);
    nrf_drv_gpiote_in_event_enable(IMU_IRQ, true);



    bsp_board_init(0);

    const app_uart_comm_params_t comm_params =
      {
          UART_0_RX_PIN,
          UART_0_TX_PIN,
          DW3000_RTS_PIN_NUM,
          DW3000_CTS_PIN_NUM,
          APP_UART_FLOW_CONTROL_DISABLED,
          false,
          NRF_UART_BAUDRATE_115200
      };

    APP_UART_FIFO_INIT(&comm_params,
                     UART_RX_BUF_SIZE,
                     UART_TX_BUF_SIZE,
                     uart_event_handler,
                     APP_IRQ_PRIORITY_LOWEST,
                     err_code);
    APP_ERROR_CHECK(err_code);


    const nrf_drv_twi_config_t twi_config = {
       .scl                = QT_I2C_SCL,
       .sda                = QT_I2C_SDA,
       .frequency          = NRF_DRV_TWI_FREQ_100K,
       .interrupt_priority = APP_IRQ_PRIORITY_HIGH,
       .clear_bus_init     = false
    };
    port_i2c_init(&m_twi, &twi_config);
}





