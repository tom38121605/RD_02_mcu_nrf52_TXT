
跟SPI共用SCL,SDA引脚

SCL: P0.11 (MOSI_0)
SDA: P0.06 (CS_0)
UARTRX: P1.02 (SYNCH)



============================================

typedef struct pb_field_iter_s pb_field_iter_t;

struct pb_field_iter_s 
{
    const pb_msgdesc_t *descriptor;  /* Pointer to message descriptor constant */
    void *message;                   /* Pointer to start of the structure */

    pb_size_t index;                 /* Index of the field */
    pb_size_t field_info_index;      /* Index to descriptor->field_info array */
    pb_size_t required_field_index;  /* Index that counts only the required fields */
    pb_size_t submessage_index;      /* Index that counts only submessages */

    pb_size_t tag;                   /* Tag of current field */
    pb_size_t data_size;             /* sizeof() of a single item */
    pb_size_t array_size;            /* Number of array entries */
    pb_type_t type;                  /* Type of current field */

    void *pField;                    /* Pointer to current field in struct */
    void *pData;                     /* Pointer to current data contents. Different than pField for arrays and pointers. */
    void *pSize;                     /* Pointer to count/has field */

    const pb_msgdesc_t *submsg_desc; /* For submessage fields, pointer to field descriptor for the submessage. */
};




typedef struct pb_msgdesc_s pb_msgdesc_t;

struct pb_msgdesc_s 
{
    const uint32_t *field_info;
    const pb_msgdesc_t * const * submsg_info;
    const pb_byte_t *default_value;

    bool (*field_callback)(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_iter_t *field);

    pb_size_t field_count;
    pb_size_t required_field_count;
    pb_size_t largest_tag;
};

extern const pb_msgdesc_t DeviceInfoProto_msg;


=============================================


typedef enum _DataHeaderFormat 
{ 
    DATA_HEADER_FORMAT_TS_ENC = 0,  
    DATA_HEADER_FORMAT_TS_A_X = 1,  
    DATA_HEADER_FORMAT_TS_ENCO_ENC = 2,  
    DATA_HEADER_FORMAT_TS_X_Z_A = 3,  
    DATA_HEADER_FORMAT_TS_TSO_X_Z_A = 4, 
    DATA_HEADER_FORMAT_TS = 5, 
    DATA_HEADER_FORMAT_TS_TSO = 6 
} DataHeaderFormat;

typedef struct _DeviceInfoProto   //BBB
{ 
    pb_bytes_array_t *device_calibration;
    pb_size_t legacy_device_calibration_count;
    pb_bytes_array_t **legacy_device_calibration;
    pb_size_t ics_count;
    struct _DeviceInfoICProto *ics;
    uint8_t device_part_num;
    uint64_t calibration_date;
    uint64_t uuid;
    DataSourcingStrategy data_sourcing_strat;
    bool config_encoder_high_frequency;
    uint32_t config_encoder_left_shift;  
    SiuPids onboard_siu_parent;
} DeviceInfoProto;


typedef struct _DeviceDescriptorProto    AAA-1
{ 
    uint8_t port_num;
    struct _DeviceInfoProto *device_info;          //BBB
    struct _DeviceInfoUserProto *device_info_user;
} DeviceDescriptorProto;


typedef struct _DeviceGroupDescriptorProto    //AAA
{ 
    uint32_t sample_period;
    uint32_t siu_uuid;

    DataHeaderFormat header_format;

    uint32_t data_packet_length;
    pb_size_t devices_count;

    struct _DeviceDescriptorProto *devices;   AAA-1

    uint32_t timestamp_ticks_per_second;

} DeviceGroupDescriptorProto;



============================================================

struct pb_istream_s

    int *callback;

    void *state;  

    size_t bytes_left;

typedef struct   pb_istream_s   pb_istream_t;




-------------------------


#define COBS_MAX_LEN(x)  ((x) + 1 + ((x)>>8))
#define COBS_CRC_POST0_MAX_LEN(x) (COBS_MAX_LEN(x) + 2)


---------


typedef enum _ICBusLocation 
{ 
    IC_BUS_LOCATION_I2C_MOSI_CS0 = 0, 

    IC_BUS_LOCATION_I2C_MOSI_MISO = 1, 

    IC_BUS_LOCATION_FIXED_0 = 128, 
    IC_BUS_LOCATION_FIXED_1 = 129, 
    IC_BUS_LOCATION_FIXED_2 = 130, 
    IC_BUS_LOCATION_FIXED_3 = 131, 
    IC_BUS_LOCATION_FIXED_4 = 132, 
    IC_BUS_LOCATION_FIXED_5 = 133, 
    IC_BUS_LOCATION_FIXED_6 = 134, 
    IC_BUS_LOCATION_FIXED_7 = 135 
} ICBusLocation;



------------


  typedef struct
  {
      port_type_t port_type;
      uint8_t hw_index;
      uint8_t eeprom_ss; 
      uint8_t ss_index_list[4];
  } sensors_port_t;


sensors_port_t   port_defs[OMMO_SENSOR_NUM_PORTS] = OMMO_SENSOR_PORT_DESC;

#define OMMO_SENSOR_PORT_DESC      
  {                                
    {PORT_TYPE_DIRECT, 0xFF, 0xFF, {0xFF, 0xFF, 0xFF, 0xFF}}, 
    {PORT_TYPE_OMMOCOMM_HALF_DUPLEX_UART, 0, 0xFE, {0, 1, 2, 3}}, 

    {PORT_TYPE_DIRECT, 0, 0, {0, 1, 2, 0xFF}},  
  }




======================================参考===CNCTESTAPP=================================================

NotFound
Received command packet:
Failed to enable data


    [pbr::OriginalName("OMMO_ACK_NOT_FOUND")] NotFound = 4,

    [pbr::OriginalName("OMMO_COMMAND_GET_PACKET_DESCRIPTOR")] GetPacketDescriptor = 13,
    [pbr::OriginalName("OMMO_COMMAND_GET_MULTI_PACKET_DESCRIPTOR")] GetMultiPacketDescriptor = 27,









